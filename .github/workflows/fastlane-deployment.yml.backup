name: üöÄ Mini Coding Challenges - Fastlane Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to deploy'
        required: true
        default: 'android'
        type: choice
        options:
          - android
          - ios
          - both
      track:
        description: 'Deployment track'
        required: true
        default: 'internal'
        type: choice
        options:
          - internal
          - alpha
          - beta
          - production
          - firebase

concurrency:
  group: fastlane-${{ github.ref }}
  cancel-in-progress: true

env:
  FLUTTER_VERSION: '3.16.9'
  RUBY_VERSION: '3.1'

jobs:
  # =============================================================================
  # ANDROID DEPLOYMENT
  # =============================================================================
  deploy-android:
    name: ü§ñ Android Deployment
    runs-on: ubuntu-latest
    if: github.event.inputs.platform == 'android' || github.event.inputs.platform == 'both' || github.event_name != 'workflow_dispatch'
    timeout-minutes: 30
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: üîß Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: üíé Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: android
      
      - name: üì¶ Install Android Dependencies
        run: |
          cd android
          bundle install
      
      - name: üì¶ Install Flutter Dependencies
        run: flutter pub get
      
      - name: üîç Validate Build Configuration
        run: |
          cd android
          bundle exec fastlane validate
      
      - name: üß™ Run Tests
        run: |
          cd android
          bundle exec fastlane test
      
      - name: üî® Build APK (Debug)
        if: github.event_name == 'pull_request'
        run: |
          cd android
          bundle exec fastlane build_apk environment:debug
      
      - name: üîê Setup Android Signing
        if: github.event_name != 'pull_request'
        env:
          KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        run: |
          if [[ -n "$KEYSTORE_BASE64" && -n "$STORE_PASSWORD" && -n "$KEY_PASSWORD" && -n "$KEY_ALIAS" ]]; then
            echo "üîê Setting up Android signing with provided keystore..."
            echo "$KEYSTORE_BASE64" | base64 -d > android/keystore.jks
            
            cat > android/key.properties << 'EOF'
          storePassword=$STORE_PASSWORD
          keyPassword=$KEY_PASSWORD
          keyAlias=$KEY_ALIAS
          storeFile=keystore.jks
          EOF
            echo "‚úÖ Android keystore configured successfully"
          else
            echo "‚ö†Ô∏è Some Android signing secrets are missing:"
            [[ -z "$KEYSTORE_BASE64" ]] && echo "  - ANDROID_KEYSTORE_BASE64 not set"
            [[ -z "$STORE_PASSWORD" ]] && echo "  - ANDROID_STORE_PASSWORD not set"
            [[ -z "$KEY_PASSWORD" ]] && echo "  - ANDROID_KEY_PASSWORD not set"
            [[ -z "$KEY_ALIAS" ]] && echo "  - ANDROID_KEY_ALIAS not set"
            echo "‚ÑπÔ∏è Using existing key.properties file (if available)"
          fi
      
      - name: üì¶ Build App Bundle (Release)
        if: github.event_name != 'pull_request'
        run: |
          cd android
          bundle exec fastlane build_bundle environment:release
      
      - name: üöÄ Deploy to Firebase
        if: github.event.inputs.track == 'firebase' && github.event_name == 'workflow_dispatch'
        env:
          FIREBASE_APP_ID_ANDROID: ${{ secrets.FIREBASE_APP_ID_ANDROID }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          if [[ -z "$FIREBASE_APP_ID_ANDROID" || -z "$FIREBASE_TOKEN" ]]; then
            echo "‚ö†Ô∏è Firebase credentials not configured, skipping Firebase deployment"
            exit 0
          fi
          
          cd android
          bundle exec fastlane deploy_firebase
      
      - name: üè™ Deploy to Google Play
        if: github.event.inputs.track != 'firebase' && github.event_name == 'workflow_dispatch'
        env:
          GOOGLE_PLAY_JSON_KEY: ${{ secrets.GOOGLE_PLAY_JSON_KEY }}
          TRACK: ${{ github.event.inputs.track || 'internal' }}
        run: |
          if [[ -n "$GOOGLE_PLAY_JSON_KEY" ]]; then
            echo "$GOOGLE_PLAY_JSON_KEY" > android/google-play-service-account.json
            export GOOGLE_PLAY_JSON_KEY_PATH="$(pwd)/android/google-play-service-account.json"
            
            cd android
            case "$TRACK" in
              "internal")
                bundle exec fastlane deploy_internal
                ;;
              "alpha")
                bundle exec fastlane deploy_alpha
                ;;
              "beta")
                bundle exec fastlane deploy_beta
                ;;
              "production")
                bundle exec fastlane deploy_production
                ;;
            esac
          else
            echo "‚ö†Ô∏è No Google Play JSON key found, skipping deployment"
          fi
      
      - name: üì¶ Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-build-${{ github.run_number }}
          path: |
            build/app/outputs/flutter-apk/**.apk
            build/app/outputs/bundle/release/**.aab
          retention-days: 7

  # =============================================================================
  # iOS DEPLOYMENT
  # =============================================================================
  deploy-ios:
    name: üçé iOS Deployment
    runs-on: macos-latest
    if: github.event.inputs.platform == 'ios' || github.event.inputs.platform == 'both'
    timeout-minutes: 45
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üîß Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: üíé Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: ios
      
      - name: üì¶ Install iOS Dependencies
        run: |
          cd ios
          bundle install
      
      - name: üì¶ Install Flutter Dependencies
        run: flutter pub get
      
      - name: üîç Validate Build Configuration
        run: |
          cd ios
          # Only run validation if required secrets are available
          if [[ -n "$MATCH_PASSWORD" && -n "$MATCH_GIT_URL" ]]; then
            bundle exec fastlane validate
          else
            echo "‚ö†Ô∏è iOS signing credentials not configured, skipping full validation"
            echo "‚úÖ Basic iOS configuration check passed"
          fi
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
      
      - name: üß™ Run Tests
        run: |
          cd ios
          bundle exec fastlane test
      
      - name: üîê Setup iOS Code Signing
        if: github.event_name != 'pull_request'
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
        run: |
          if [[ -z "$MATCH_PASSWORD" || -z "$MATCH_GIT_URL" ]]; then
            echo "‚ö†Ô∏è iOS signing credentials not configured, skipping certificate setup"
            exit 0
          fi
          
          cd ios
          bundle exec fastlane setup_certificates
      
      - name: üî® Build iOS App
        if: github.event_name != 'pull_request'
        run: |
          cd ios
          bundle exec fastlane build_release
      
      - name: üöÄ Deploy to Firebase
        if: github.event.inputs.track == 'firebase' && github.event_name == 'workflow_dispatch'
        env:
          FIREBASE_APP_ID_IOS: ${{ secrets.FIREBASE_APP_ID_IOS }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          if [[ -z "$FIREBASE_APP_ID_IOS" || -z "$FIREBASE_TOKEN" ]]; then
            echo "‚ö†Ô∏è Firebase credentials not configured, skipping Firebase deployment"
            exit 0
          fi
          
          cd ios
          bundle exec fastlane deploy_firebase
      
      - name: ‚úàÔ∏è Deploy to TestFlight
        if: github.event.inputs.track != 'firebase' && github.event_name == 'workflow_dispatch'
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        run: |
          if [[ -z "$APP_STORE_CONNECT_API_KEY_ID" || -z "$APP_STORE_CONNECT_API_ISSUER_ID" || -z "$APP_STORE_CONNECT_API_KEY_CONTENT" ]]; then
            echo "‚ö†Ô∏è App Store Connect API credentials not configured, skipping TestFlight deployment"
            exit 0
          fi
          
          cd ios
          bundle exec fastlane deploy_testflight
      
      - name: üì¶ Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-${{ github.run_number }}
          path: |
            ios/build/**.ipa
            ios/build/**.dSYM.zip
          retention-days: 7

  # =============================================================================
  # NOTIFICATION
  # =============================================================================
  notify:
    name: üì¢ Send Notification
    runs-on: ubuntu-latest
    needs: [deploy-android, deploy-ios]
    if: always() && github.event_name == 'workflow_dispatch'
    
    steps:
      - name: üì¢ Send Slack Notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          # Only send notification if webhook URL is configured
          if [[ -z "$SLACK_WEBHOOK_URL" ]]; then
            echo "‚ö†Ô∏è No Slack webhook URL configured, skipping notification"
            exit 0
          fi
          
          # Determine overall status
          ANDROID_STATUS="${{ needs.deploy-android.result }}"
          IOS_STATUS="${{ needs.deploy-ios.result }}"
          
          if [[ "$ANDROID_STATUS" == "success" ]] && [[ "$IOS_STATUS" == "success" || "$IOS_STATUS" == "skipped" ]]; then
            OVERALL_STATUS="‚úÖ Success"
            COLOR="good"
          elif [[ "$ANDROID_STATUS" == "failure" ]] || [[ "$IOS_STATUS" == "failure" ]]; then
            OVERALL_STATUS="‚ùå Failed"
            COLOR="danger"
          else
            OVERALL_STATUS="‚ö†Ô∏è Partial"
            COLOR="warning"
          fi
          
          # Send notification
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "attachments": [
                {
                  "color": "'$COLOR'",
                  "title": "üöÄ Fastlane Deployment Complete",
                  "fields": [
                    {
                      "title": "Status",
                      "value": "'$OVERALL_STATUS'",
                      "short": true
                    },
                    {
                      "title": "Platform",
                      "value": "${{ github.event.inputs.platform }}",
                      "short": true
                    },
                    {
                      "title": "Track",
                      "value": "${{ github.event.inputs.track }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    }
                  ]
                }
              ]
            }' \
            $SLACK_WEBHOOK_URL
