name: 🚀 Production Build with Dynamic Versioning

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: false
        default: 'release'
        type: choice
        options:
          - debug
          - release
      version_suffix:
        description: 'Version suffix (optional)'
        required: false
        type: string

env:
  JAVA_VERSION: '17'
  FLAVOR: 'production'

jobs:
  build:
    name: 🔨 Build Production ${{ github.event.inputs.build_type || 'Release' }} Artifacts
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      # =============================================================================
      # ENVIRONMENT SETUP
      # =============================================================================
      
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better versioning

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: 🔍 Verify Dart SDK Version
        run: |
          echo "Flutter version:"
          flutter --version
          echo "Dart SDK version:"
          dart --version
          echo "Required Dart SDK: ^3.8.1"

      - name: 💎 Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: android

      # =============================================================================
      # DEPENDENCY MANAGEMENT
      # =============================================================================

      - name: 📦 Get Flutter Dependencies
        run: flutter pub get

      - name: 🔍 Verify Flutter Setup
        run: |
          flutter doctor -v
          flutter --version

      # =============================================================================
      # BUILD INFORMATION
      # =============================================================================

      - name: 🏷️ Generate Build Information
        id: build_info
        run: |
          # Generate timestamp-based version (Android-safe format)
          TIMESTAMP=$(date +"%y%m%d%H%M")  # YY format to stay under 2.1B limit
          GIT_COMMIT=$(git rev-parse --short HEAD)
          GIT_BRANCH=${GITHUB_REF#refs/heads/}
          BUILD_NUMBER=${GITHUB_RUN_NUMBER:-$TIMESTAMP}
          
          # Ensure build number is under Android limit (2.1 billion)
          if [ "$BUILD_NUMBER" -gt 2100000000 ]; then
            BUILD_NUMBER=$TIMESTAMP
          fi
          
          # Generate version name for production
          MAJOR_MINOR_PATCH="1.0.0"
          BUILD_TYPE="${{ github.event.inputs.build_type || 'release' }}"
          
          if [[ "$GIT_BRANCH" == "main" || "$GIT_BRANCH" == "master" ]]; then
            if [ "$BUILD_TYPE" = "release" ]; then
              VERSION_NAME="${MAJOR_MINOR_PATCH}"
            else
              VERSION_NAME="${MAJOR_MINOR_PATCH}-${BUILD_TYPE}-${GIT_COMMIT}"
            fi
          else
            CLEAN_BRANCH=$(echo "$GIT_BRANCH" | sed 's/[^a-zA-Z0-9]//g')
            VERSION_NAME="${MAJOR_MINOR_PATCH}-${CLEAN_BRANCH}-${GIT_COMMIT}"
          fi
          
          # Add custom suffix if provided
          if [[ -n "${{ github.event.inputs.version_suffix }}" ]]; then
            VERSION_NAME="${VERSION_NAME}-${{ github.event.inputs.version_suffix }}"
          fi
          
          echo "version_name=${VERSION_NAME}" >> $GITHUB_OUTPUT
          echo "version_code=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
          echo "git_commit=${GIT_COMMIT}" >> $GITHUB_OUTPUT
          echo "git_branch=${GIT_BRANCH}" >> $GITHUB_OUTPUT
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          
          echo "🏷️ Version: ${VERSION_NAME} (${BUILD_NUMBER})"
          echo "📋 Branch: ${GIT_BRANCH}"
          echo "📋 Commit: ${GIT_COMMIT}"

      # =============================================================================
      # BUILD ARTIFACTS
      # =============================================================================

      - name: 🔨 Build Production Artifacts with Fastlane
        run: |
          cd android
          BUILD_TYPE="${{ github.event.inputs.build_type || 'release' }}"
          if [ "$BUILD_TYPE" = "release" ]; then
            bundle exec fastlane build_production_release_artifacts
          else
            bundle exec fastlane build_production_debug_artifacts
          fi
        env:
          GITHUB_RUN_NUMBER: ${{ github.run_number }}

      - name: 📄 Generate Build Metadata
        run: |
          cat > build_metadata.json << EOF
          {
            "version_name": "${{ steps.build_info.outputs.version_name }}",
            "version_code": "${{ steps.build_info.outputs.version_code }}",
            "build_time": "$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")",
            "git_branch": "${{ steps.build_info.outputs.git_branch }}",
            "git_commit": "${{ steps.build_info.outputs.git_commit }}",
            "git_commit_full": "${{ github.sha }}",
            "workflow_run": "${{ github.run_number }}",
            "workflow_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "build_type": "${{ github.event.inputs.build_type || 'release' }}",
            "flavor": "production",
            "flutter_version": "$(flutter --version | head -n1)",
            "java_version": "${{ env.JAVA_VERSION }}"
          }
          EOF

      # =============================================================================
      # ARTIFACT VERIFICATION
      # =============================================================================

      - name: 🔍 Verify Build Artifacts
        run: |
          echo "🔍 Verifying production build artifacts..."
          
          BUILD_TYPE="${{ github.event.inputs.build_type || 'release' }}"
          echo "🔍 Looking for production $BUILD_TYPE artifacts..."
          
          # Define all possible APK locations based on build type
          if [ "$BUILD_TYPE" = "release" ]; then
            APK_PATHS=(
              "build/app/outputs/flutter-apk/app-production-release.apk"
              "build/app/outputs/apk/production/release/app-production-release.apk"
              "build/app/outputs/flutter-apk/app-release.apk"
              "build/app/outputs/apk/release/app-release.apk"
            )
            AAB_PATHS=(
              "build/app/outputs/bundle/productionRelease/app-production-release.aab"
              "build/app/outputs/bundle/release/app-production-release.aab"
              "build/app/outputs/bundle/release/app-release.aab"
            )
          else
            APK_PATHS=(
              "build/app/outputs/flutter-apk/app-production-debug.apk"
              "build/app/outputs/apk/production/debug/app-production-debug.apk"
              "build/app/outputs/flutter-apk/app-debug.apk"
              "build/app/outputs/apk/debug/app-debug.apk"
            )
            AAB_PATHS=(
              "build/app/outputs/bundle/productionDebug/app-production-debug.aab"
              "build/app/outputs/bundle/debug/app-production-debug.aab"
              "build/app/outputs/bundle/debug/app-debug.aab"
            )
          fi
          
          # Search for APK
          APK_FOUND=""
          for apk_path in "${APK_PATHS[@]}"; do
            if [ -f "$apk_path" ]; then
              APK_SIZE=$(du -h "$apk_path" | cut -f1)
              echo "✅ Production APK found: $(basename "$apk_path") (${APK_SIZE}) at $apk_path"
              echo "production_apk=$apk_path" >> $GITHUB_ENV
              APK_FOUND="$apk_path"
              break
            fi
          done
          
          if [ -z "$APK_FOUND" ]; then
            echo "❌ Production APK not found in any expected location!"
            echo "📁 Checking all available APK files..."
            find build -name "*.apk" 2>/dev/null | head -20 || echo "No APK files found anywhere"
            echo "📁 Listing build/app/outputs structure:"
            find build/app/outputs -type f 2>/dev/null | head -20 || echo "build/app/outputs not found"
            exit 1
          fi
          
          # Search for AAB
          AAB_FOUND=""
          for aab_path in "${AAB_PATHS[@]}"; do
            if [ -f "$aab_path" ]; then
              AAB_SIZE=$(du -h "$aab_path" | cut -f1)
              echo "✅ Production AAB found: $(basename "$aab_path") (${AAB_SIZE}) at $aab_path"
              echo "production_aab=$aab_path" >> $GITHUB_ENV
              AAB_FOUND="$aab_path"
              break
            fi
          done
          
          if [ -z "$AAB_FOUND" ]; then
            echo "❌ Production AAB not found in any expected location!"
            echo "📁 Checking all available AAB files..."
            find build -name "*.aab" 2>/dev/null | head -20 || echo "No AAB files found anywhere"
            echo "📁 Listing build/app/outputs/bundle structure:"
            find build/app/outputs/bundle -type f 2>/dev/null | head -20 || echo "build/app/outputs/bundle not found"
            exit 1
          fi
          
          echo "🎉 All production artifacts verified successfully!"
          echo "📦 APK: $APK_FOUND"
          echo "📦 AAB: $AAB_FOUND"

      # =============================================================================
      # ARTIFACT UPLOAD
      # =============================================================================

      - name: 📤 Upload Production APK Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-apk-${{ github.event.inputs.build_type || 'release' }}-${{ steps.build_info.outputs.version_name }}
          path: |
            build/app/outputs/flutter-apk/app-production-*.apk
            build/app/outputs/apk/production/*/app-production-*.apk
            build/app/outputs/flutter-apk/app-debug.apk
            build/app/outputs/flutter-apk/app-release.apk
            build_metadata.json
            build_info.json
          retention-days: 90
          compression-level: 6

      - name: 📤 Upload Production App Bundle Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-aab-${{ github.event.inputs.build_type || 'release' }}-${{ steps.build_info.outputs.version_name }}
          path: |
            build/app/outputs/bundle/production*/app-production-*.aab
            build/app/outputs/bundle/*/app-production-*.aab
            build/app/outputs/bundle/debug/app-debug.aab
            build/app/outputs/bundle/release/app-release.aab
            build_metadata.json
            build_info.json
          retention-days: 90
          compression-level: 6

      - name: 📤 Upload Build Information
        uses: actions/upload-artifact@v4
        with:
          name: production-build-info-${{ steps.build_info.outputs.version_name }}
          path: |
            build_metadata.json
            build_info.json
          retention-days: 180

      # =============================================================================
      # BUILD SUMMARY
      # =============================================================================

      - name: 📋 Build Summary
        if: always()
        run: |
          BUILD_TYPE="${{ github.event.inputs.build_type || 'release' }}"
          echo "## 🚀 Production $BUILD_TYPE Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Flavor** | \`production\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version Name** | \`${{ steps.build_info.outputs.version_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version Code** | \`${{ steps.build_info.outputs.version_code }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Git Branch** | \`${{ steps.build_info.outputs.git_branch }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Git Commit** | \`${{ steps.build_info.outputs.git_commit }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Type** | \`$BUILD_TYPE\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Flutter Version** | \`$(flutter --version | head -n1 | cut -d' ' -f2)\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📱 Artifacts Generated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Production APK**: \`app-production-$BUILD_TYPE.apk\`" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Production App Bundle**: \`app-production-$BUILD_TYPE.aab\`" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Build Metadata**: \`build_metadata.json\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Workflow Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Number**: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: [${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # NOTIFICATION (Optional)
  # =============================================================================
  notify:
    name: 📢 Notify Production Build Completion
    runs-on: ubuntu-latest
    needs: build
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: 📢 Notify Success
        if: needs.build.result == 'success'
        run: |
          echo "✅ Production build completed successfully!"
          echo "🎉 Production artifacts are ready for deployment"
          
      - name: 📢 Notify Failure
        if: needs.build.result == 'failure'
        run: |
          echo "❌ Production build failed!"
          echo "🔍 Check the logs for details"
