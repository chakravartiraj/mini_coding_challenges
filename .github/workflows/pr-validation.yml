name: 🔍 Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel previous runs for the same PR
concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  FLUTTER_VERSION: '3.16.0'

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # =============================================================================
  # FAST VALIDATION - EARLY FEEDBACK
  # =============================================================================
  quick-validation:
    name: ⚡ Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event.pull_request.draft == false
    
    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: 📏 PR Size Check
        run: |
          files_changed=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | wc -l)
          lines_changed=$(git diff --stat origin/${{ github.event.pull_request.base.ref }}...HEAD | tail -n 1 | grep -o '[0-9]\+ insertions\|[0-9]\+ deletions' | grep -o '[0-9]\+' | paste -sd+ | bc || echo 0)
          
          echo "📊 PR Statistics:"
          echo "Files changed: $files_changed"
          echo "Lines changed: $lines_changed"
          
          # Set limits for PR size
          if [ $files_changed -gt 50 ]; then
            echo "⚠️ Large PR: $files_changed files changed (consider splitting)"
          fi
          
          if [ $lines_changed -gt 1000 ]; then
            echo "⚠️ Large changeset: $lines_changed lines changed"
          fi
      
      - name: 🏷️ Validate PR Title
        run: |
          pr_title="${{ github.event.pull_request.title }}"
          echo "📋 PR Title: $pr_title"
          
          # Check for conventional commit format
          if [[ ! "$pr_title" =~ ^(feat|fix|docs|style|refactor|test|chore|ci)(\(.+\))?: .+ ]]; then
            echo "⚠️ PR title doesn't follow conventional commit format"
            echo "Expected format: type(scope): description"
            echo "Types: feat, fix, docs, style, refactor, test, chore, ci"
          fi
      
      - name: 📝 Check PR Description
        run: |
          description="${{ github.event.pull_request.body }}"
          if [ -z "$description" ] || [ ${#description} -lt 20 ]; then
            echo "⚠️ PR description is too short or missing"
            echo "Please provide a detailed description of changes"
          fi

  # =============================================================================
  # CODE QUALITY CHECKS
  # =============================================================================
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    needs: quick-validation
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      
      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: 📦 Install Dependencies
        run: flutter pub get
      
      - name: 🧹 Format Check
        run: |
          echo "🔍 Checking formatting..."
          dart format --output=none --set-exit-if-changed . || {
            echo "❌ Code is not properly formatted"
            echo "Run 'dart format .' to fix formatting issues"
            exit 1
          }
      
      - name: 🔍 Lint Analysis
        run: |
          echo "📊 Running lint analysis..."
          flutter analyze --fatal-warnings > analysis_output.txt 2>&1 || {
            echo "❌ Lint analysis failed"
            cat analysis_output.txt
            exit 1
          }
          echo "✅ Lint analysis passed"
      
      - name: 📊 Changed Files Analysis
        run: |
          echo "📋 Analyzing changed files..."
          git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep '\.dart$' > changed_dart_files.txt || true
          
          if [ -s changed_dart_files.txt ]; then
            echo "📝 Changed Dart files:"
            cat changed_dart_files.txt
            
            # Analyze only changed files
            echo "🔍 Analyzing changed files specifically..."
            while read -r file; do
              if [ -f "$file" ]; then
                flutter analyze "$file"
              fi
            done < changed_dart_files.txt
          else
            echo "ℹ️ No Dart files changed in this PR"
          fi
      
      - name: 🧪 Test Affected Areas
        run: |
          echo "🧪 Running tests for affected areas..."
          
          # Find test files related to changed files
          if [ -s changed_dart_files.txt ]; then
            test_files=""
            while read -r file; do
              # Convert lib/ files to test/ files
              test_file=$(echo "$file" | sed 's|lib/|test/|' | sed 's|\.dart$|_test.dart|')
              if [ -f "$test_file" ]; then
                test_files="$test_files $test_file"
              fi
            done < changed_dart_files.txt
            
            if [ -n "$test_files" ]; then
              echo "🎯 Running targeted tests: $test_files"
              flutter test $test_files
            else
              echo "ℹ️ No specific tests found for changed files"
              echo "🧪 Running all tests..."
              flutter test || echo "⚠️ Some tests failed or no tests exist"
            fi
          fi

  # =============================================================================
  # SECURITY AND DEPENDENCY CHECKS
  # =============================================================================
  security-check:
    name: 🔒 Security Check
    runs-on: ubuntu-latest
    needs: quick-validation
    timeout-minutes: 8
    
    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
      
      - name: 🔒 Dependency Security Audit
        run: |
          echo "🔍 Checking for security vulnerabilities..."
          flutter pub deps --json > deps.json
          
          # Check for known problematic packages (example)
          if grep -q "http:" pubspec.yaml; then
            echo "⚠️ Found HTTP URLs - prefer HTTPS"
          fi
          
          # Check for overly permissive dependencies
          if grep -q "any" pubspec.yaml; then
            echo "⚠️ Found 'any' version constraints - specify versions"
          fi
      
      - name: 🔍 Secret Scanning
        run: |
          echo "🔍 Scanning for potential secrets..."
          
          # Basic secret pattern detection
          if grep -r -i -E "(api_key|secret|password|token).*=.*['\"][^'\"]{8,}" lib/ test/ 2>/dev/null; then
            echo "⚠️ Potential hardcoded secrets detected"
            echo "Please use environment variables or secure storage"
          fi
          
          # Check for TODO/FIXME with sensitive content
          if grep -r -i -E "(TODO|FIXME).*(password|secret|key)" lib/ test/ 2>/dev/null; then
            echo "⚠️ TODO/FIXME comments mentioning sensitive information"
          fi

  # =============================================================================
  # BUILD VALIDATION
  # =============================================================================
  build-validation:
    name: 🔨 Build Validation
    runs-on: ubuntu-latest
    needs: [code-quality, security-check]
    timeout-minutes: 15
    strategy:
      matrix:
        platform: [android, web]
    
    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: 📦 Install Dependencies
        run: flutter pub get
      
      - name: 🔨 Build ${{ matrix.platform }}
        run: |
          case "${{ matrix.platform }}" in
            android)
              echo "🤖 Building Android (debug)..."
              flutter build apk --debug
              ;;
            web)
              echo "🌐 Building Web..."
              flutter config --enable-web
              flutter build web --debug
              ;;
          esac
      
      - name: 📊 Build Size Check
        run: |
          case "${{ matrix.platform }}" in
            android)
              if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
                size=$(ls -lh build/app/outputs/flutter-apk/app-debug.apk | awk '{print $5}')
                echo "📱 Android APK size: $size"
              fi
              ;;
            web)
              if [ -d "build/web" ]; then
                size=$(du -sh build/web | awk '{print $1}')
                echo "🌐 Web build size: $size"
              fi
              ;;
          esac

  # =============================================================================
  # PR SUMMARY AND FEEDBACK
  # =============================================================================
  pr-summary:
    name: 📋 PR Summary
    runs-on: ubuntu-latest
    needs: [quick-validation, code-quality, security-check, build-validation]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: 📊 Generate PR Summary
        run: |
          echo "## 🔍 Pull Request Validation Summary" > pr_summary.md
          echo "" >> pr_summary.md
          
          # Status indicators
          if [ "${{ needs.quick-validation.result }}" == "success" ]; then
            echo "✅ Quick Validation: Passed" >> pr_summary.md
          else
            echo "❌ Quick Validation: Failed" >> pr_summary.md
          fi
          
          if [ "${{ needs.code-quality.result }}" == "success" ]; then
            echo "✅ Code Quality: Passed" >> pr_summary.md
          else
            echo "❌ Code Quality: Failed" >> pr_summary.md
          fi
          
          if [ "${{ needs.security-check.result }}" == "success" ]; then
            echo "✅ Security Check: Passed" >> pr_summary.md
          else
            echo "❌ Security Check: Failed" >> pr_summary.md
          fi
          
          if [ "${{ needs.build-validation.result }}" == "success" ]; then
            echo "✅ Build Validation: Passed" >> pr_summary.md
          else
            echo "❌ Build Validation: Failed" >> pr_summary.md
          fi
          
          echo "" >> pr_summary.md
          echo "### 📋 PR Information" >> pr_summary.md
          echo "- **Number**: #${{ github.event.pull_request.number }}" >> pr_summary.md
          echo "- **Title**: ${{ github.event.pull_request.title }}" >> pr_summary.md
          echo "- **Author**: @${{ github.event.pull_request.user.login }}" >> pr_summary.md
          echo "- **Base**: \`${{ github.event.pull_request.base.ref }}\`" >> pr_summary.md
          echo "- **Head**: \`${{ github.event.pull_request.head.ref }}\`" >> pr_summary.md
          echo "" >> pr_summary.md
          
          # Overall status
          overall_status="success"
          for result in "${{ needs.quick-validation.result }}" "${{ needs.code-quality.result }}" "${{ needs.security-check.result }}" "${{ needs.build-validation.result }}"; do
            if [ "$result" != "success" ] && [ "$result" != "skipped" ]; then
              overall_status="failure"
              break
            fi
          done
          
          if [ "$overall_status" == "success" ]; then
            echo "### 🎉 All Checks Passed!" >> pr_summary.md
            echo "This PR is ready for review and merge." >> pr_summary.md
          else
            echo "### ⚠️ Some Checks Failed" >> pr_summary.md
            echo "Please review the failed checks and make necessary corrections." >> pr_summary.md
          fi
          
          echo "" >> pr_summary.md
          echo "---" >> pr_summary.md
          echo "*Automated validation by Mini Coding Challenges CI/CD*" >> pr_summary.md
      
      - name: 💬 Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('pr_summary.md', 'utf8');
            
            // Find existing bot comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Pull Request Validation Summary')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }
