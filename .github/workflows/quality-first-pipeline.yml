name: 🚀 Professional Flutter Quality-First CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      run_performance_tests:
        description: 'Run performance tests'
        required: false
        default: true
        type: boolean

# Cancel previous runs for the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FLUTTER_VERSION: '3.16.9'
  JAVA_VERSION: '17'
  RUBY_VERSION: '3.1'

# Permissions for GitHub token
permissions:
  contents: read
  pull-requests: write
  checks: write
  actions: read

jobs:
  # =============================================================================
  # JOB 1: STATIC CODE ANALYSIS & FORMATTING
  # =============================================================================
  static-analysis:
    name: 🔍 Static Analysis & Code Formatting
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: 💎 Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: android
      
      - name: 📦 Install Dependencies
        run: |
          flutter pub get
          cd android && bundle install
      
      - name: 🔍 Run Static Analysis Pipeline
        run: |
          cd android
          bundle exec fastlane --file QualityFastfile analyze
      
      - name: 📤 Upload Analysis Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: static-analysis-reports
          path: |
            reports/analysis/
          retention-days: 30

  # =============================================================================
  # JOB 2: UNIT TESTING
  # =============================================================================
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: static-analysis
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: 💎 Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: android
      
      - name: 📦 Install Dependencies
        run: |
          flutter pub get
          cd android && bundle install
      
      - name: 🧪 Run Unit Tests
        run: |
          cd android
          bundle exec fastlane --file QualityFastfile test_unit
      
      - name: 📤 Upload Test Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-reports
          path: |
            reports/tests/
          retention-days: 30

  # =============================================================================
  # JOB 3: WIDGET & INTEGRATION TESTING
  # =============================================================================
  integration-tests:
    name: 🎨 Widget & Integration Tests
    runs-on: ubuntu-latest
    needs: static-analysis
    timeout-minutes: 20
    strategy:
      matrix:
        test-type: [widget, integration, golden]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: 💎 Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: android
      
      - name: 📦 Install Dependencies
        run: |
          flutter pub get
          cd android && bundle install
      
      - name: 🧪 Run ${{ matrix.test-type }} Tests
        run: |
          cd android
          bundle exec fastlane --file QualityFastfile test_${{ matrix.test-type }}
      
      - name: 📤 Upload Test Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.test-type }}-test-reports
          path: |
            reports/tests/
          retention-days: 30

  # =============================================================================
  # JOB 4: TEST COVERAGE ANALYSIS
  # =============================================================================
  coverage-analysis:
    name: 📊 Test Coverage Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: 💎 Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: android
      
      - name: 📥 Download Test Results
        uses: actions/download-artifact@v4
        with:
          pattern: "*-test-reports"
          merge-multiple: true
          path: ./test-artifacts
      
      - name: 📊 Generate Coverage Report
        run: |
          flutter pub get
          cd android
          bundle exec fastlane --file QualityFastfile coverage_report
      
      - name: 📝 Coverage Summary Comment (PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const coveragePath = 'reports/coverage/summary.txt';
              if (fs.existsSync(coveragePath)) {
                const coverage = fs.readFileSync(coveragePath, 'utf8');
                const comment = `## 📊 Test Coverage Report
                
                \`\`\`
                ${coverage}
                \`\`\`
                
                📄 Full coverage report available in artifacts.`;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Coverage file not found, skipping comment');
            }
      
      - name: 📤 Upload Coverage Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            reports/coverage/
            coverage/
          retention-days: 30

  # =============================================================================
  # JOB 5: PERFORMANCE MONITORING
  # =============================================================================
  performance-monitoring:
    name: ⚡ Performance Monitoring
    runs-on: ubuntu-latest
    needs: static-analysis
    if: ${{ github.event.inputs.run_performance_tests != 'false' }}
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}
      
      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: 💎 Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: android
      
      - name: 📦 Install Dependencies
        run: |
          flutter pub get
          cd android && bundle install
      
      - name: ⚡ Run Performance Analysis
        run: |
          cd android
          bundle exec fastlane --file QualityFastfile performance_monitoring
      
      - name: 📤 Upload Performance Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-reports
          path: |
            reports/performance/
          retention-days: 30

  # =============================================================================
  # JOB 6: BUILD ARTIFACTS GENERATION
  # =============================================================================
  build-artifacts:
    name: 🔨 Build APK Artifacts
    runs-on: ubuntu-latest
    needs: [static-analysis, unit-tests]
    timeout-minutes: 25
    strategy:
      matrix:
        build-type: [debug, release]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}
      
      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: 💎 Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: android
      
      - name: 📦 Install Dependencies
        run: |
          flutter pub get
          cd android && bundle install
      
      - name: 🔨 Build ${{ matrix.build-type }} APK
        run: |
          cd android
          bundle exec fastlane --file QualityFastfile build_apk environment:${{ matrix.build-type }}
      
      - name: 🔨 Build App Bundle (Release Only)
        if: matrix.build-type == 'release'
        run: |
          cd android
          bundle exec fastlane --file QualityFastfile build_bundle environment:${{ matrix.build-type }}
      
      - name: 📦 Collect Build Artifacts
        run: |
          mkdir -p build-outputs
          find build -name "*.apk" -exec cp {} build-outputs/ \; 2>/dev/null || true
          find build -name "*.aab" -exec cp {} build-outputs/ \; 2>/dev/null || true
          ls -la build-outputs/ || echo "No build artifacts found"
      
      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-artifacts-${{ matrix.build-type }}
          path: |
            build-outputs/
            reports/build/
          retention-days: 30

  # =============================================================================
  # JOB 7: MASTER QUALITY PIPELINE SUMMARY
  # =============================================================================
  quality-summary:
    name: 📋 Quality Pipeline Summary
    runs-on: ubuntu-latest
    needs: [static-analysis, unit-tests, integration-tests, coverage-analysis, performance-monitoring, build-artifacts]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: 💎 Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: android
      
      - name: 📥 Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./all-artifacts
      
      - name: 📊 Generate Quality Summary Report
        run: |
          flutter pub get
          cd android
          bundle exec fastlane --file QualityFastfile quality_report
      
      - name: 📋 Create GitHub Summary
        run: |
          echo "# 🚀 Flutter Quality Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Static Analysis | ${{ needs.static-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage Analysis | ${{ needs.coverage-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Monitoring | ${{ needs.performance-monitoring.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Artifacts | ${{ needs.build-artifacts.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Generated Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Static Analysis Reports" >> $GITHUB_STEP_SUMMARY
          echo "- Test Reports (Unit, Widget, Integration, Golden)" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage Reports" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Reports" >> $GITHUB_STEP_SUMMARY
          echo "- Build Artifacts (APK & App Bundle)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📄 **All reports available in workflow artifacts**" >> $GITHUB_STEP_SUMMARY
      
      - name: 📝 PR Quality Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 🚀 Quality Pipeline Results
            
            | Stage | Status |
            |-------|--------|
            | 🔍 Static Analysis | ${{ needs.static-analysis.result == 'success' && '✅' || '❌' }} ${{ needs.static-analysis.result }} |
            | 🧪 Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅' || '❌' }} ${{ needs.unit-tests.result }} |
            | 🎨 Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅' || '❌' }} ${{ needs.integration-tests.result }} |
            | 📊 Coverage Analysis | ${{ needs.coverage-analysis.result == 'success' && '✅' || '❌' }} ${{ needs.coverage-analysis.result }} |
            | ⚡ Performance Monitoring | ${{ needs.performance-monitoring.result == 'success' && '✅' || '❌' }} ${{ needs.performance-monitoring.result }} |
            | 🔨 Build Artifacts | ${{ needs.build-artifacts.result == 'success' && '✅' || '❌' }} ${{ needs.build-artifacts.result }} |
            
            🎯 **Quality Gates Status:** ${{ (needs.static-analysis.result == 'success' && needs.unit-tests.result == 'success' && needs.build-artifacts.result == 'success') && '✅ PASSED' || '❌ FAILED' }}
            
            📄 All detailed reports are available in the workflow artifacts.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
      
      - name: 📤 Upload Final Quality Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: final-quality-summary
          path: |
            reports/
            all-artifacts/
          retention-days: 90

  # =============================================================================
  # JOB 8: QUALITY GATE CHECK
  # =============================================================================
  quality-gate:
    name: 🎯 Quality Gate
    runs-on: ubuntu-latest
    needs: [static-analysis, unit-tests, build-artifacts]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: 🎯 Evaluate Quality Gate
        run: |
          echo "🎯 Evaluating Quality Gate..."
          
          # Check required stages
          if [[ "${{ needs.static-analysis.result }}" != "success" ]]; then
            echo "❌ Static Analysis failed"
            exit 1
          fi
          
          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "❌ Unit Tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.build-artifacts.result }}" != "success" ]]; then
            echo "❌ Build Artifacts failed"
            exit 1
          fi
          
          echo "✅ Quality Gate PASSED - All critical stages successful!"
          echo "🚀 Code ready for merge/deployment"
      
      - name: ✅ Quality Gate Success
        if: success()
        run: |
          echo "🎉 Congratulations! Your code has passed all quality gates."
          echo "📊 Pipeline Summary:"
          echo "  ✅ Static Analysis & Code Formatting"
          echo "  ✅ Unit Testing"
          echo "  ✅ Build Artifact Generation"
          echo "  📄 All reports generated and available"
