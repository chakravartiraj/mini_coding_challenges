name: 🚀 Fastlane Deployment Pipeline

on:
  push:
    branches: [ main, develop, release/* ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to deploy'
        required: true
        default: 'both'
        type: choice
        options:
          - android
          - ios
          - both
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - dev
          - staging
          - production
      lane:
        description: 'Specific lane to run'
        required: false
        type: string

# Cancel previous runs for the same workflow
concurrency:
  group: fastlane-${{ github.ref }}
  cancel-in-progress: true

env:
  FLUTTER_VERSION: '3.16.0'
  RUBY_VERSION: '3.1'

jobs:
  # =============================================================================
  # SETUP AND PREPARATION
  # =============================================================================
  setup:
    name: 🔧 Setup Environment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      deploy-android: ${{ steps.determine-deployment.outputs.deploy-android }}
      deploy-ios: ${{ steps.determine-deployment.outputs.deploy-ios }}
      environment: ${{ steps.determine-deployment.outputs.environment }}
      should-deploy: ${{ steps.determine-deployment.outputs.should-deploy }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🎯 Determine Deployment Strategy
        id: determine-deployment
        run: |
          # Determine platforms to deploy
          if [[ "${{ github.event.inputs.platform }}" == "android" ]]; then
            echo "deploy-android=true" >> $GITHUB_OUTPUT
            echo "deploy-ios=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.platform }}" == "ios" ]]; then
            echo "deploy-android=false" >> $GITHUB_OUTPUT
            echo "deploy-ios=true" >> $GITHUB_OUTPUT
          else
            echo "deploy-android=true" >> $GITHUB_OUTPUT
            echo "deploy-ios=true" >> $GITHUB_OUTPUT
          fi
          
          # Determine environment
          if [[ "${{ github.event.inputs.environment }}" != "" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
          
          # Determine if we should deploy
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || \
             [[ "${{ github.ref }}" == "refs/heads/main" ]] || \
             [[ "${{ github.ref }}" == "refs/heads/develop" ]] || \
             [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi
      
      - name: 📋 Deployment Summary
        run: |
          echo "🎯 Deployment Configuration:"
          echo "├── Android: ${{ steps.determine-deployment.outputs.deploy-android }}"
          echo "├── iOS: ${{ steps.determine-deployment.outputs.deploy-ios }}"
          echo "├── Environment: ${{ steps.determine-deployment.outputs.environment }}"
          echo "└── Should Deploy: ${{ steps.determine-deployment.outputs.should-deploy }}"

  # =============================================================================
  # ANDROID DEPLOYMENT
  # =============================================================================
  deploy-android:
    name: 🤖 Android Deployment
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.deploy-android == 'true' && needs.setup.outputs.should-deploy == 'true'
    timeout-minutes: 45
    environment: ${{ needs.setup.outputs.environment }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'
      
      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: 💎 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
      
      - name: 📦 Install Dependencies
        run: |
          flutter pub get
          bundle install
      
      - name: 🔐 Setup Android Signing
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          # Create keystore from base64
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > android/app/keystore.jks
          
          # Create key.properties
          cat > android/key.properties << EOF
          storePassword=$ANDROID_KEYSTORE_PASSWORD
          keyPassword=$ANDROID_KEY_PASSWORD
          keyAlias=$ANDROID_KEY_ALIAS
          storeFile=keystore.jks
          EOF
      
      - name: 🔥 Setup Firebase Service Account
        if: env.FIREBASE_SERVICE_ACCOUNT_KEY != ''
        env:
          FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        run: |
          echo "$FIREBASE_SERVICE_ACCOUNT_KEY" > android/firebase-service-account.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/android/firebase-service-account.json" >> $GITHUB_ENV
      
      - name: 📱 Setup Google Play Service Account
        if: env.GOOGLE_PLAY_JSON_KEY != ''
        env:
          GOOGLE_PLAY_JSON_KEY: ${{ secrets.GOOGLE_PLAY_JSON_KEY }}
        run: |
          echo "$GOOGLE_PLAY_JSON_KEY" > android/google-play-service-account.json
          echo "GOOGLE_PLAY_JSON_KEY_PATH=$(pwd)/android/google-play-service-account.json" >> $GITHUB_ENV
      
      - name: 🚀 Deploy with Fastlane
        env:
          FIREBASE_APP_ID_ANDROID: ${{ secrets.FIREBASE_APP_ID_ANDROID }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          ENVIRONMENT: ${{ needs.setup.outputs.environment }}
          SPECIFIC_LANE: ${{ github.event.inputs.lane }}
        run: |
          cd android
          if [[ "$SPECIFIC_LANE" != "" ]]; then
            bundle exec fastlane $SPECIFIC_LANE
          else
            bundle exec fastlane $ENVIRONMENT
          fi
      
      - name: 📦 Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-build-${{ needs.setup.outputs.environment }}-${{ github.run_number }}
          path: |
            build/app/outputs/
            android/fastlane/report.xml
            android/fastlane/logs/
          retention-days: 30
      
      - name: 📊 Upload Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Android Tests
          path: android/fastlane/report.xml
          reporter: java-junit

  # =============================================================================
  # iOS DEPLOYMENT
  # =============================================================================
  deploy-ios:
    name: 🍎 iOS Deployment
    runs-on: macos-14
    needs: setup
    if: needs.setup.outputs.deploy-ios == 'true' && needs.setup.outputs.should-deploy == 'true'
    timeout-minutes: 60
    environment: ${{ needs.setup.outputs.environment }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: 💎 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
      
      - name: 📦 Install Dependencies
        run: |
          flutter pub get
          bundle install
          cd ios && pod install
      
      - name: 🔐 Setup iOS Code Signing
        env:
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          # Setup API key for App Store Connect
          mkdir -p ~/.appstoreconnect/private_keys/
          echo "$APP_STORE_CONNECT_API_KEY" > ~/.appstoreconnect/private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
          echo "APP_STORE_CONNECT_API_KEY_PATH=~/.appstoreconnect/private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8" >> $GITHUB_ENV
          
          # Create temporary git config for match
          git config --global user.email "ci@example.com"
          git config --global user.name "CI Runner"
      
      - name: 🔥 Setup Firebase Service Account
        if: env.FIREBASE_SERVICE_ACCOUNT_KEY != ''
        env:
          FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        run: |
          echo "$FIREBASE_SERVICE_ACCOUNT_KEY" > ios/firebase-service-account.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/ios/firebase-service-account.json" >> $GITHUB_ENV
      
      - name: 🚀 Deploy with Fastlane
        env:
          FIREBASE_APP_ID_IOS: ${{ secrets.FIREBASE_APP_ID_IOS }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          ENVIRONMENT: ${{ needs.setup.outputs.environment }}
          SPECIFIC_LANE: ${{ github.event.inputs.lane }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          cd ios
          if [[ "$SPECIFIC_LANE" != "" ]]; then
            bundle exec fastlane $SPECIFIC_LANE
          else
            bundle exec fastlane $ENVIRONMENT
          fi
      
      - name: 📦 Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-${{ needs.setup.outputs.environment }}-${{ github.run_number }}
          path: |
            build/ios/
            ios/fastlane/report.xml
            ios/fastlane/logs/
          retention-days: 30
      
      - name: 📊 Upload Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: iOS Tests
          path: ios/fastlane/report.xml
          reporter: java-junit

  # =============================================================================
  # NOTIFICATION AND REPORTING
  # =============================================================================
  notify-completion:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [setup, deploy-android, deploy-ios]
    if: always() && needs.setup.outputs.should-deploy == 'true'
    
    steps:
      - name: 📊 Determine Overall Status
        id: status
        run: |
          android_status="${{ needs.deploy-android.result }}"
          ios_status="${{ needs.deploy-ios.result }}"
          
          if [[ "$android_status" == "success" || "$android_status" == "skipped" ]] && \
             [[ "$ios_status" == "success" || "$ios_status" == "skipped" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Deployment completed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Deployment failed" >> $GITHUB_OUTPUT
          fi
      
      - name: 📢 Send Slack Notification
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.status.outputs.status }}
          channel: '#deployments'
          webhook_url: ${{ env.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              text: "${{ steps.status.outputs.message }}",
              attachments: [{
                color: '${{ steps.status.outputs.status }}' === 'success' ? 'good' : 'danger',
                fields: [{
                  title: 'Environment',
                  value: '${{ needs.setup.outputs.environment }}',
                  short: true
                }, {
                  title: 'Android',
                  value: '${{ needs.deploy-android.result }}',
                  short: true
                }, {
                  title: 'iOS', 
                  value: '${{ needs.deploy-ios.result }}',
                  short: true
                }, {
                  title: 'Triggered by',
                  value: '${{ github.actor }}',
                  short: true
                }]
              }]
            }
      
      - name: 📋 Deployment Summary
        run: |
          echo "🚀 Fastlane Deployment Summary"
          echo "=================================="
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          echo "Android: ${{ needs.deploy-android.result }}"
          echo "iOS: ${{ needs.deploy-ios.result }}"
          echo "Overall: ${{ steps.status.outputs.status }}"
          echo "=================================="
