name: 🚀 Flutter CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

# Environment variables for the entire workflow
env:
  FLUTTER_VERSION: '3.16.0'
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

# Global permissions
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # =============================================================================
  # JOB 1: SETUP AND VALIDATION
  # =============================================================================
  setup:
    name: 🔧 Setup & Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      flutter-version: ${{ steps.flutter-version.outputs.version }}
      should-deploy: ${{ steps.deploy-check.outputs.should-deploy }}
      cache-key: ${{ steps.cache-key.outputs.key }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: 🏷️ Generate Cache Key
        id: cache-key
        run: |
          echo "key=flutter-${{ env.FLUTTER_VERSION }}-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}" >> $GITHUB_OUTPUT
      
      - name: 🔍 Check Flutter Version
        id: flutter-version
        run: |
          echo "version=${{ env.FLUTTER_VERSION }}" >> $GITHUB_OUTPUT
      
      - name: 📋 Deployment Check
        id: deploy-check
        run: |
          if [[ "${{ github.event_name }}" == "release" ]] || [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi
      
      - name: 📊 Project Structure Analysis
        run: |
          echo "📁 Project Structure:"
          find lib -type f -name "*.dart" | head -10
          echo "📦 Dependencies:"
          grep -A 20 "dependencies:" pubspec.yaml

  # =============================================================================
  # JOB 2: QUALITY-FIRST FASTLANE PIPELINE - ANALYSIS & FORMATTING
  # =============================================================================
  quality-analysis:
    name: 🔍 Quality Analysis (Fastlane)
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          cache-key: ${{ needs.setup.outputs.cache-key }}
      
      - name: 📦 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            flutter-${{ env.FLUTTER_VERSION }}-${{ runner.os }}-
      
      - name: � Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          working-directory: android
      
      - name: � Install Fastlane Dependencies
        run: |
          cd android
          bundle install
      
      - name: � Run Fastlane Analysis Pipeline
        run: |
          cd android
          bundle exec fastlane --file QualityFastfile analyze
      
      - name: 🧹 Run Fastlane Formatting Pipeline
        run: |
          cd android
          bundle exec fastlane --file QualityFastfile format_code
      
      - name: 📤 Upload Analysis Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-analysis-reports
          path: |
            reports/analysis/
            coverage/
          retention-days: 30

  # =============================================================================
  # JOB 3: COMPREHENSIVE TESTING SUITE (Fastlane)
  # =============================================================================
  testing-suite:
    name: 🧪 Testing Suite (Fastlane)
    runs-on: ubuntu-latest
    needs: [setup, quality-analysis]
    timeout-minutes: 25
    strategy:
      matrix:
        test-suite: [unit, widget, integration, golden]
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: 💎 Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          working-directory: android
      
      - name: 📥 Install Dependencies
        run: |
          flutter pub get
          cd android && bundle install
      
      - name: 🧪 Run ${{ matrix.test-suite }} Tests
        run: |
          cd android
          case "${{ matrix.test-suite }}" in
            "unit")
              bundle exec fastlane --file QualityFastfile test_unit
              ;;
            "widget")
              bundle exec fastlane --file QualityFastfile test_widget
              ;;
            "integration")
              bundle exec fastlane --file QualityFastfile test_integration
              ;;
            "golden")
              bundle exec fastlane --file QualityFastfile test_golden
              ;;
          esac
      
      - name: 📤 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-suite }}
          path: |
            reports/tests/
            coverage/
          retention-days: 30

  # =============================================================================
  # JOB 4: COVERAGE ANALYSIS (Fastlane)
  # =============================================================================
  coverage-analysis:
    name: 📊 Coverage Analysis
    runs-on: ubuntu-latest
    needs: [setup, testing-suite]
    if: always() && (needs.testing-suite.result == 'success' || needs.testing-suite.result == 'failure')
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: 💎 Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          working-directory: android
      
      - name: 📥 Download Test Results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true
          path: ./test-artifacts
      
      - name: 📊 Generate Coverage Report
        run: |
          cd android
          bundle exec fastlane --file QualityFastfile coverage_report
      
      - name: 📤 Upload Coverage Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            coverage/
            reports/coverage/
          retention-days: 30

  # =============================================================================
  # JOB 5: PERFORMANCE MONITORING (Fastlane)
  # =============================================================================
  performance-monitoring:
    name: ⚡ Performance Monitoring
    runs-on: ubuntu-latest
    needs: [setup, quality-analysis]
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: � Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: 💎 Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          working-directory: android
      
      - name: 📥 Install Dependencies
        run: |
          flutter pub get
          cd android && bundle install
      
      - name: ⚡ Run Performance Analysis
        run: |
          cd android
          bundle exec fastlane --file QualityFastfile performance_monitoring
      
      - name: 📤 Upload Performance Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-reports
          path: |
            reports/performance/
          retention-days: 30

  # =============================================================================
  # JOB 6: BUILD ARTIFACTS (Fastlane)
  # =============================================================================
  build-artifacts:
    name: 🔨 Build Artifacts (Fastlane)
    runs-on: ubuntu-latest
    needs: [setup, quality-analysis, testing-suite, coverage-analysis]
    timeout-minutes: 30
    strategy:
      matrix:
        build-type: [debug, release]
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: � Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          working-directory: android
      
      - name: 📦 Install Dependencies
        run: |
          flutter pub get
          cd android && bundle install
      
      - name: 🔨 Build APK (${{ matrix.build-type }})
        run: |
          cd android
          bundle exec fastlane --file QualityFastfile build_apk environment:${{ matrix.build-type }}
      
      - name: 🔨 Build App Bundle (${{ matrix.build-type }})
        if: matrix.build-type == 'release'
        run: |
          cd android
          bundle exec fastlane --file QualityFastfile build_bundle environment:${{ matrix.build-type }}
      
      - name: � Upload Build Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-artifacts-${{ matrix.build-type }}
          path: |
            build/app/outputs/flutter-apk/*.apk
            build/app/outputs/bundle/release/*.aab
            reports/build/
          retention-days: 30

  # =============================================================================
  # JOB 7: QUALITY REPORTING & MASTER PIPELINE
  # =============================================================================
  quality-master-pipeline:
    name: 🎯 Master Quality Pipeline
    runs-on: ubuntu-latest
    needs: [setup, quality-analysis, testing-suite, coverage-analysis, performance-monitoring, build-artifacts]
    if: always()
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: 💎 Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          working-directory: android
      
      - name: 📥 Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      - name: 🎯 Run Master Quality Pipeline
        run: |
          cd android
          bundle exec fastlane --file QualityFastfile master_quality_pipeline
      
      - name: 📊 Generate Final Quality Report
        run: |
          cd android
          bundle exec fastlane --file QualityFastfile quality_report
      
      - name: 📤 Upload Final Quality Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: final-quality-reports
          path: |
            reports/
            artifacts/
          retention-days: 90

  # =============================================================================
  # JOB 8: DEPLOYMENT PREPARATION
  # =============================================================================
  deployment-prep:
    name: 🚀 Deployment Preparation
    runs-on: ubuntu-latest
    needs: [setup, testing-suite, build-artifacts]
    if: needs.setup.outputs.should-deploy == 'true'
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 📥 Download All Artifacts
        uses: actions/download-artifact@v4
      
      - name: 📊 Create Deployment Summary
        run: |
          echo "🚀 Deployment Summary" > deployment_summary.md
          echo "===================" >> deployment_summary.md
          echo "" >> deployment_summary.md
          echo "## Build Information" >> deployment_summary.md
          echo "- **Commit**: ${{ github.sha }}" >> deployment_summary.md
          echo "- **Branch**: ${{ github.ref_name }}" >> deployment_summary.md
          echo "- **Event**: ${{ github.event_name }}" >> deployment_summary.md
          echo "- **Flutter Version**: ${{ env.FLUTTER_VERSION }}" >> deployment_summary.md
          echo "- **Build Time**: $(date -u)" >> deployment_summary.md
          echo "" >> deployment_summary.md
          echo "## Available Artifacts" >> deployment_summary.md
          for dir in */; do
            if [ -d "$dir" ] && [ "$dir" != ".github/" ]; then
              echo "- $dir" >> deployment_summary.md
            fi
          done
      
      - name: 📤 Upload Deployment Package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: |
            deployment_summary.md
            android-apk/
            web-build/
            linux-build/
          retention-days: 90

  # =============================================================================
  # JOB 6: RELEASE MANAGEMENT
  # =============================================================================
  release:
    name: 🎉 Release Management
    runs-on: ubuntu-latest
    needs: [setup, deployment-prep]
    if: github.event_name == 'release'
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 📥 Download Deployment Package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
      
      - name: 🏷️ Create Release Assets
        run: |
          # Create release directory
          mkdir -p release-assets
          
          # Package Android APK
          if [ -d "android-apk" ]; then
            cd android-apk
            zip -r ../release-assets/mini-coding-challenges-android.zip .
            cd ..
          fi
          
          # Package Web build
          if [ -d "web-build" ]; then
            cd web-build
            zip -r ../release-assets/mini-coding-challenges-web.zip .
            cd ..
          fi
          
          # Package Linux build
          if [ -d "linux-build" ]; then
            cd linux-build
            tar -czf ../release-assets/mini-coding-challenges-linux.tar.gz .
            cd ..
          fi
          
          # Create checksums
          cd release-assets
          sha256sum * > checksums.txt
          cd ..
      
      - name: 📤 Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-assets/*
          body_path: deployment_summary.md
          tag_name: ${{ github.event.release.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # =============================================================================
  # JOB 7: FASTLANE DEPLOYMENT TRIGGER
  # =============================================================================
  trigger-fastlane:
    name: 🚀 Trigger Fastlane Deployment
    runs-on: ubuntu-latest
    needs: [setup, quality-analysis, testing-suite, build-artifacts]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    timeout-minutes: 5
    
    steps:
      - name: 🎯 Determine Environment
        id: environment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
      
      - name: 🚀 Trigger Fastlane Deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const result = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'fastlane-deployment.yml',
              ref: context.ref,
              inputs: {
                platform: 'both',
                environment: '${{ steps.environment.outputs.environment }}'
              }
            });
            
            console.log('🚀 Fastlane deployment triggered');
            console.log(`Environment: ${{ steps.environment.outputs.environment }}`);
            console.log(`Platform: both`);
            console.log(`Workflow run: ${result.status}`);
      
      - name: 📢 Deployment Notice
        run: |
          echo "🚀 Fastlane deployment has been triggered for ${{ steps.environment.outputs.environment }} environment"
          echo "📱 Both Android and iOS builds will be processed"
          echo "🔗 Check the Fastlane Deployment Pipeline workflow for progress"

  # =============================================================================
  # JOB 8: NOTIFICATIONS AND REPORTING
  # =============================================================================
  notification:
    name: 📢 Notification & Cleanup
    runs-on: ubuntu-latest
    needs: [setup, quality-analysis, testing-suite, build-artifacts, deployment-prep]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: 📊 Workflow Summary
        run: |
          echo "## 🚀 Mini Coding Challenges CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Setup | ${{ needs.setup.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Analysis | ${{ needs.quality-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Testing Suite | ${{ needs.testing-suite.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Artifacts | ${{ needs.build-artifacts.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment Prep | ${{ needs.deployment-prep.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Generated Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "- Test Coverage Reports" >> $GITHUB_STEP_SUMMARY
          echo "- Android APK" >> $GITHUB_STEP_SUMMARY
          echo "- Web Build" >> $GITHUB_STEP_SUMMARY
          echo "- Linux Build" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.setup.outputs.should-deploy }}" == "true" ]; then
            echo "- Deployment Package" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Repository](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Actions](https://github.com/${{ github.repository }}/actions)" >> $GITHUB_STEP_SUMMARY
          echo "- [Releases](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY
      
      - name: 🧹 Cleanup Notice
        run: |
          echo "🧹 Artifacts will be retained according to retention policies"
          echo "📊 Workflow completed successfully"
