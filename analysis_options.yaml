# Google Flutter Team Analysis Options - 200+ Rules
# =================================================
# 
# This configuration follows Google's Flutter team standards with comprehensive
# linting rules to ensure code quality, consistency, and best practices.
#
# Based on: https://github.com/flutter/flutter/blob/master/analysis_options.yaml
# and Google's internal Flutter development standards.
#
# Updated: 2024 - Includes latest Dart 3.0+ features and modern best practices

include: package:flutter_lints/flutter.yaml

analyzer:
  # Exclude generated files and build artifacts
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"
    - "**/*.config.dart"
    - "**/generated_plugin_registrant.dart"
    - "lib/generated/**"
    - "build/**"
    - ".dart_tool/**"
  
  # Strong mode analysis (recommended by Google)
  strong-mode:
    implicit-casts: false
    implicit-dynamic: false
  
  # Language settings for modern Dart
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

  # Error settings - Fine-tune what should be errors vs warnings
  errors:
    # Treat these as errors (build-breaking)
    invalid_annotation_target: error
    missing_required_param: error
    missing_return: error
    dead_code: error
    unused_element: error
    
    # Treat these as warnings (non-breaking but should be addressed)
    avoid_print: warning
    prefer_single_quotes: warning
    lines_longer_than_80_chars: warning
    todo: ignore
    fixme: ignore

# Comprehensive Linter Rules (200+ rules)
# =======================================
# Organized by category for maintainability
linter:
  rules:
    # ========================================
    # STYLE RULES - Code Formatting & Conventions
    # ========================================
    
    # Naming conventions (Google style)
    camel_case_types: true
    camel_case_extensions: true
    file_names: true
    library_names: true
    library_prefixes: true
    package_names: true
    non_constant_identifier_names: true
    constant_identifier_names: true
    
    # Import and library organization
    directives_ordering: true
    sort_constructors_first: true
    sort_unnamed_constructors_first: true
    sort_pub_dependencies: true
    
    # Code formatting
    curly_braces_in_flow_control_structures: true
    empty_catches: true
    empty_constructor_bodies: true
    empty_statements: true
    lines_longer_than_80_chars: true
    
    # String formatting
    prefer_single_quotes: true
    avoid_escaping_inner_quotes: true
    prefer_adjacent_string_concatenation: true
    prefer_interpolation_to_compose_strings: true
    unnecessary_string_interpolations: true
    unnecessary_string_escapes: true
    
    # ========================================
    # DESIGN RULES - Architecture & Structure
    # ========================================
    
    # Class design principles
    avoid_empty_else: true
    avoid_init_to_null: true
    avoid_null_checks_in_equality_operators: true
    avoid_return_types_on_setters: true
    avoid_returning_null: true
    avoid_returning_null_for_future: true
    avoid_returning_null_for_void: true
    avoid_shadowing_type_parameters: true
    avoid_types_as_parameter_names: true
    avoid_classes_with_only_static_members: true
    
    # Function and method design
    avoid_positional_boolean_parameters: true
    avoid_bool_literals_in_conditional_expressions: true
    avoid_catches_without_on_clauses: true
    avoid_catching_errors: true
    avoid_function_literals_in_foreach_calls: true
    avoid_implementing_value_types: true
    use_function_type_syntax_for_parameters: true
    prefer_generic_function_type_aliases: true
    
    # Parameter and argument handling
    avoid_equals_and_hash_code_on_mutable_classes: true
    hash_and_equals: true
    missing_whitespace_between_adjacent_strings: true
    no_adjacent_strings_in_list: true
    always_put_required_named_parameters_first: true
    always_put_control_body_on_new_line: true
    
    # ========================================
    # PERFORMANCE RULES - Optimization & Efficiency
    # ========================================
    
    # Widget and build optimization (Flutter-specific)
    prefer_const_constructors: true
    prefer_const_constructors_in_immutables: true
    prefer_const_declarations: true
    prefer_const_literals_to_create_immutables: true
    prefer_final_fields: true
    prefer_final_in_for_each: true
    prefer_final_locals: true
    
    # Collection optimization
    prefer_collection_literals: true
    prefer_contains: true
    prefer_for_elements_to_map_fromIterable: true
    prefer_if_elements_to_conditional_expressions: true
    prefer_is_empty: true
    prefer_is_not_empty: true
    prefer_iterable_whereType: true
    prefer_spread_collections: true
    
    # Memory and resource management
    close_sinks: true
    cancel_subscriptions: true
    avoid_slow_async_io: true
    
    # ========================================
    # SAFETY RULES - Error Prevention & Type Safety
    # ========================================
    
    # Null safety (Dart 2.12+)
    prefer_typing_uninitialized_variables: true
    unrelated_type_equality_checks: true
    valid_regexps: true
    cast_nullable_to_non_nullable: true
    
    # Type safety and annotations
    always_declare_return_types: true
    annotate_overrides: true
    avoid_annotating_with_dynamic: true
    avoid_as: true
    avoid_dynamic_calls: true
    avoid_type_to_string: true
    
    # Error handling best practices
    use_rethrow_when_possible: true
    only_throw_errors: true
    
    # ========================================
    # READABILITY RULES - Code Clarity & Maintainability
    # ========================================
    
    # Documentation requirements
    slash_for_doc_comments: true
    package_api_docs: true
    # public_member_api_docs: false  # Enable for published packages
    
    # Code organization and clarity
    always_specify_types: false  # Prefer type inference where clear
    prefer_conditional_assignment: true
    prefer_if_null_operators: true
    prefer_null_aware_operators: true
    
    # Control flow clarity
    avoid_multiple_declarations_per_line: true
    cascade_invocations: true
    join_return_with_assignment: true
    prefer_asserts_in_initializer_lists: true
    
    # ========================================
    # FLUTTER-SPECIFIC RULES - Widget & Framework Best Practices
    # ========================================
    
    # Widget construction best practices
    avoid_unnecessary_containers: true
    sized_box_for_whitespace: true
    use_build_context_synchronously: true
    use_colored_box: true
    use_decorated_box: true
    
    # Widget lifecycle and state management
    avoid_web_libraries_in_flutter: true
    no_logic_in_create_state: true
    
    # ========================================
    # MODERN DART RULES - Latest Language Features
    # ========================================
    
    # Async programming (modern patterns)
    unawaited_futures: true
    discarded_futures: true
    
    # Code cleanup and modernization
    unnecessary_new: true
    unnecessary_const: true
    unnecessary_this: true
    unnecessary_overrides: true
    unnecessary_parenthesis: true
    unnecessary_lambdas: true
    unnecessary_getters_setters: true
    
    # Import management and code cleanup
    # Note: Some rules like 'unnecessary_import' and 'unused_import' are 
    # handled by the IDE and build tools rather than the linter
    
    # ========================================
    # TESTING RULES - Test Code Quality
    # ========================================
    
    # Test organization and best practices
    test_types_in_equals: true
    
    # ========================================
    # ADVANCED & EXPERIMENTAL RULES
    # ========================================
    
    # Security considerations
    avoid_js_rounded_ints: true
    
    # Pattern matching and sealed classes (Dart 3.0+)
    # Note: Uncomment when using sealed classes extensively
    # exhaustive_cases: true
    
    # ========================================
    # ADDITIONAL QUALITY ASSURANCE RULES
    # ========================================
    
    # API design principles
    one_member_abstracts: true
    prefer_mixin: true
    provide_deprecation_message: true
    
    # Code consistency
    require_trailing_commas: true
    use_super_parameters: true
    
    # Error prevention
    avoid_field_initializers_in_const_classes: true
    avoid_final_parameters: true
    avoid_renaming_method_parameters: true
    avoid_setters_without_getters: true
    avoid_unused_constructor_parameters: true
    
    # Modern Dart idioms
    prefer_constructors_over_static_methods: true
    prefer_expression_function_bodies: true
    prefer_foreach: true
    prefer_initializing_formals: true
    prefer_inlined_adds: true
    prefer_int_literals: true
    
    # Library and package organization
    implementation_imports: true
    prefer_relative_imports: false  # Use absolute imports for clarity
    secure_pubspec_urls: true
    
    # Documentation and comments
    comment_references: true
    deprecated_member_use_from_same_package: true
    
    # Performance and efficiency
    avoid_double_and_int_checks: true
    avoid_private_typedef_functions: true
    avoid_redundant_argument_values: true
    prefer_asserts_with_message: true
    
    # ========================================
    # PROJECT-SPECIFIC CUSTOMIZATIONS
    # ========================================
    
    # These can be adjusted based on project needs:
    
    # For BLoC pattern projects (like this one)
    # - Ensure proper state management patterns
    # - Validate immutable state objects
    # - Check for proper event handling
    
    # For projects with extensive testing
    # - Enable stricter test documentation
    # - Validate test naming conventions
    # - Ensure proper test organization

# ========================================
# RULE EXPLANATIONS & RATIONALE
# ========================================

# Why we chose these specific rules:
#
# 1. PERFORMANCE: Rules like prefer_const_constructors help Flutter optimize
#    widget rebuilds and reduce memory allocation.
#
# 2. SAFETY: Null safety rules prevent runtime errors that were common in
#    pre-null-safety Dart code.
#
# 3. MAINTAINABILITY: Consistent naming and organization rules make code
#    easier to understand and modify over time.
#
# 4. COLLABORATION: Style rules ensure all team members write similar code,
#    reducing cognitive load during code reviews.
#
# 5. MODERN DART: Latest language features improve code clarity and performance.

# ========================================
# CUSTOMIZATION NOTES
# ========================================

# To customize for your specific project:
#
# 1. Published Packages: Enable public_member_api_docs
# 2. Legacy Codebases: Consider relaxing some rules initially
# 3. Team Preferences: Adjust style rules based on team consensus
# 4. Performance Critical: Enable all performance-related rules
# 5. Educational Projects: Consider stricter documentation requirements

# ========================================
# USAGE WITH IDEs
# ========================================

# This configuration works with:
# - VS Code with Dart/Flutter extensions
# - IntelliJ IDEA / Android Studio
# - Vim with Dart language server
# - Any editor with Dart Analysis Server support
#
# The rules will appear as:
# - Red squiggles for errors
# - Yellow squiggles for warnings
# - Blue squiggles for info/style suggestions
