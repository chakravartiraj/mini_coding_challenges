# Android Fastfile
# This file contains the fastlane.tools configuration for Android deployments
# Use this file to define all available lanes for Android

require 'fileutils'
require 'json'

default_platform(:android)

platform :android do
  # =============================================================================
  # ANDROID SETUP AND UTILITIES
  # =============================================================================
  
  desc "Setup Android environment and dependencies"
  lane :setup do
    puts "🔧 Setting up Android environment..."
    
    # Ensure Flutter dependencies are installed
    sh("cd .. && flutter pub get")
    
    # Clean previous builds
    sh("cd .. && flutter clean")
    
    puts "✅ Android environment setup complete"
  end
  
  desc "Run Android tests"
  lane :test do
    puts "🧪 Running Android tests..."
    
    # Run Flutter tests
    sh("cd .. && flutter test")
    
    # Run Android unit tests
    gradle(task: "test")
    
    puts "✅ Android tests completed"
  end
  
  desc "Build Android APK"
  lane :build_apk do |options|
    environment = options[:environment] || "debug"
    
    puts "🔨 Building Android APK for #{environment}..."
    
    setup
    
    if environment == "release"
      sh("cd .. && flutter build apk --release")
    else
      sh("cd .. && flutter build apk --debug")
    end
    
    puts "✅ Android APK build completed"
  end
  
  desc "Build Android App Bundle"
  lane :build_bundle do |options|
    environment = options[:environment] || "debug"
    
    puts "📦 Building Android App Bundle for #{environment}..."
    
    setup
    
    if environment == "release"
      sh("cd .. && flutter build appbundle --release")
    else
      sh("cd .. && flutter build appbundle --debug")
    end
    
    puts "✅ Android App Bundle build completed"
  end
  
  # =============================================================================
  # DEPLOYMENT LANES
  # =============================================================================
  
  desc "Deploy to internal testing"
  lane :deploy_internal do |options|
    puts "🚀 Deploying to Google Play Internal Testing..."
    
    build_bundle(environment: "release")
    
    upload_to_play_store(
      track: 'internal',
      aab: '../build/app/outputs/bundle/release/app-release.aab',
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
    
    puts "✅ Deployed to Google Play Internal Testing"
  end
  
  desc "Deploy to alpha testing"
  lane :deploy_alpha do |options|
    puts "🚀 Deploying to Google Play Alpha Testing..."
    
    build_bundle(environment: "release")
    
    upload_to_play_store(
      track: 'alpha',
      aab: '../build/app/outputs/bundle/release/app-release.aab',
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
    
    puts "✅ Deployed to Google Play Alpha Testing"
  end
  
  desc "Deploy to beta testing"
  lane :deploy_beta do |options|
    puts "🚀 Deploying to Google Play Beta Testing..."
    
    build_bundle(environment: "release")
    
    upload_to_play_store(
      track: 'beta',
      aab: '../build/app/outputs/bundle/release/app-release.aab',
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
    
    puts "✅ Deployed to Google Play Beta Testing"
  end
  
  desc "Deploy to production"
  lane :deploy_production do |options|
    puts "🚀 Deploying to Google Play Store Production..."
    
    build_bundle(environment: "release")
    
    upload_to_play_store(
      track: 'production',
      aab: '../build/app/outputs/bundle/release/app-release.aab',
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
    
    puts "✅ Deployed to Google Play Store Production"
  end
  
  desc "Deploy to Firebase App Distribution"
  lane :deploy_firebase do |options|
    puts "🔥 Deploying to Firebase App Distribution..."
    
    build_apk(environment: "release")
    
    firebase_app_distribution(
      app: ENV["FIREBASE_APP_ID_ANDROID"],
      apk_path: "../build/app/outputs/flutter-apk/app-release.apk",
      groups: "testers",
      release_notes: "Latest build from #{git_branch}"
    )
    
    puts "✅ Deployed to Firebase App Distribution"
  end
  
  # =============================================================================
  # DEBUG BUILD WITH DYNAMIC VERSIONING
  # =============================================================================
  
  desc "Build debug artifacts with dynamic versioning"
  lane :build_debug_artifacts do |options|
    puts "🚀 Building debug artifacts with dynamic versioning..."
    
    # Generate dynamic version
    version_info = generate_dynamic_version
    version_name = version_info[:version_name]
    version_code = version_info[:version_code]
    
    puts "📦 Building with version: #{version_name} (#{version_code})"
    
    setup
    
    # Build APK with dynamic version
    sh("cd .. && flutter build apk --debug --flavor dev --target=lib/main_dev.dart --build-name=#{version_name} --build-number=#{version_code}")
    
    # Build App Bundle with dynamic version
    sh("cd .. && flutter build appbundle --debug --flavor dev --target=lib/main_dev.dart --build-name=#{version_name} --build-number=#{version_code}")
    
    # Copy artifacts with timestamp-based names
    timestamped_artifacts = copy_artifacts_with_timestamp(version_name: version_name, version_code: version_code, build_type: "debug", flavor: "dev")
    
    # Create build info file
    create_build_info(version_name: version_name, version_code: version_code, build_type: "debug", flavor: "dev")
    
    puts "✅ Debug artifacts build completed with version #{version_name}"
    puts "📦 Artifacts available at:"
    puts "   APK: #{timestamped_artifacts[:apk_path]}"
    puts "   AAB: #{timestamped_artifacts[:aab_path]}"
  end
  
  desc "Build release artifacts with dynamic versioning"
  lane :build_release_artifacts do |options|
    puts "🚀 Building release artifacts with dynamic versioning..."
    
    # Generate dynamic version
    version_info = generate_dynamic_version
    version_name = version_info[:version_name]
    version_code = version_info[:version_code]
    
    puts "📦 Building with version: #{version_name} (#{version_code})"
    
    setup
    
    # Build APK with dynamic version
    sh("cd .. && flutter build apk --release --flavor production --target=lib/main_production.dart --build-name=#{version_name} --build-number=#{version_code}")
    
    # Build App Bundle with dynamic version
    sh("cd .. && flutter build appbundle --release --flavor production --target=lib/main_production.dart --build-name=#{version_name} --build-number=#{version_code}")
    
    # Copy artifacts with timestamp-based names
    timestamped_artifacts = copy_artifacts_with_timestamp(version_name: version_name, version_code: version_code, build_type: "release", flavor: "production")
    
    # Create build info file
    create_build_info(version_name: version_name, version_code: version_code, build_type: "release", flavor: "production")
    
    puts "✅ Release artifacts build completed with version #{version_name}"
    puts "📦 Artifacts available at:"
    puts "   APK: #{timestamped_artifacts[:apk_path]}"
    puts "   AAB: #{timestamped_artifacts[:aab_path]}"
  end

  # =============================================================================
  # FLAVOR-SPECIFIC BUILD LANES
  # =============================================================================
  
  desc "Build staging debug artifacts with dynamic versioning"
  lane :build_staging_debug_artifacts do |options|
    puts "🚀 Building staging debug artifacts with dynamic versioning..."
    
    # Generate dynamic version
    version_info = generate_dynamic_version
    version_name = version_info[:version_name]
    version_code = version_info[:version_code]
    
    puts "📦 Building staging debug with version: #{version_name} (#{version_code})"
    
    setup
    
    # Build APK with dynamic version
    sh("cd .. && flutter build apk --debug --flavor staging --target=lib/main_staging.dart --build-name=#{version_name} --build-number=#{version_code}")
    
    # Build App Bundle with dynamic version
    sh("cd .. && flutter build appbundle --debug --flavor staging --target=lib/main_staging.dart --build-name=#{version_name} --build-number=#{version_code}")
    
    # Copy artifacts with timestamp-based names
    timestamped_artifacts = copy_artifacts_with_timestamp(version_name: version_name, version_code: version_code, build_type: "debug", flavor: "staging")
    
    # Create build info file
    create_build_info(version_name: version_name, version_code: version_code, build_type: "debug", flavor: "staging")
    
    puts "✅ Staging debug artifacts build completed with version #{version_name}"
    puts "📦 Artifacts available at:"
    puts "   APK: #{timestamped_artifacts[:apk_path]}"
    puts "   AAB: #{timestamped_artifacts[:aab_path]}"
  end
  
  desc "Build staging release artifacts with dynamic versioning"
  lane :build_staging_release_artifacts do |options|
    puts "🚀 Building staging release artifacts with dynamic versioning..."
    
    # Generate dynamic version
    version_info = generate_dynamic_version
    version_name = version_info[:version_name]
    version_code = version_info[:version_code]
    
    puts "📦 Building staging release with version: #{version_name} (#{version_code})"
    
    setup
    
    # Build APK with dynamic version
    sh("cd .. && flutter build apk --release --flavor staging --target=lib/main_staging.dart --build-name=#{version_name} --build-number=#{version_code}")
    
    # Build App Bundle with dynamic version
    sh("cd .. && flutter build appbundle --release --flavor staging --target=lib/main_staging.dart --build-name=#{version_name} --build-number=#{version_code}")
    
    # Copy artifacts with timestamp-based names
    timestamped_artifacts = copy_artifacts_with_timestamp(version_name: version_name, version_code: version_code, build_type: "release", flavor: "staging")
    
    # Create build info file
    create_build_info(version_name: version_name, version_code: version_code, build_type: "release", flavor: "staging")
    
    puts "✅ Staging release artifacts build completed with version #{version_name}"
    puts "📦 Artifacts available at:"
    puts "   APK: #{timestamped_artifacts[:apk_path]}"
    puts "   AAB: #{timestamped_artifacts[:aab_path]}"
  end
  
  desc "Build production debug artifacts with dynamic versioning"
  lane :build_production_debug_artifacts do |options|
    puts "🚀 Building production debug artifacts with dynamic versioning..."
    
    # Generate dynamic version
    version_info = generate_dynamic_version
    version_name = version_info[:version_name]
    version_code = version_info[:version_code]
    
    puts "📦 Building production debug with version: #{version_name} (#{version_code})"
    
    setup
    
    # Build APK with dynamic version
    sh("cd .. && flutter build apk --debug --flavor production --target=lib/main_production.dart --build-name=#{version_name} --build-number=#{version_code}")
    
    # Build App Bundle with dynamic version
    sh("cd .. && flutter build appbundle --debug --flavor production --target=lib/main_production.dart --build-name=#{version_name} --build-number=#{version_code}")
    
    # Copy artifacts with timestamp-based names
    timestamped_artifacts = copy_artifacts_with_timestamp(version_name: version_name, version_code: version_code, build_type: "debug", flavor: "production")
    
    # Create build info file
    create_build_info(version_name: version_name, version_code: version_code, build_type: "debug", flavor: "production")
    
    puts "✅ Production debug artifacts build completed with version #{version_name}"
    puts "📦 Artifacts available at:"
    puts "   APK: #{timestamped_artifacts[:apk_path]}"
    puts "   AAB: #{timestamped_artifacts[:aab_path]}"
  end
  
  desc "Build production release artifacts with dynamic versioning"
  lane :build_production_release_artifacts do |options|
    puts "🚀 Building production release artifacts with dynamic versioning..."
    
    # Generate dynamic version
    version_info = generate_dynamic_version
    version_name = version_info[:version_name]
    version_code = version_info[:version_code]
    
    puts "📦 Building production release with version: #{version_name} (#{version_code})"
    
    setup
    
    # Build APK with dynamic version
    sh("cd .. && flutter build apk --release --flavor production --target=lib/main_production.dart --build-name=#{version_name} --build-number=#{version_code}")
    
    # Build App Bundle with dynamic version
    sh("cd .. && flutter build appbundle --release --flavor production --target=lib/main_production.dart --build-name=#{version_name} --build-number=#{version_code}")
    
    # Copy artifacts with timestamp-based names
    timestamped_artifacts = copy_artifacts_with_timestamp(version_name: version_name, version_code: version_code, build_type: "release", flavor: "production")
    
    # Create build info file
    create_build_info(version_name: version_name, version_code: version_code, build_type: "release", flavor: "production")
    
    puts "✅ Production release artifacts build completed with version #{version_name}"
    puts "📦 Artifacts available at:"
    puts "   APK: #{timestamped_artifacts[:apk_path]}"
    puts "   AAB: #{timestamped_artifacts[:aab_path]}"
  end

  desc "Generate dynamic version based on timestamp and git info"
  private_lane :generate_dynamic_version do
    # Get current timestamp (Android-safe format: MMDDHHMM to stay under 2.1B)
    timestamp = Time.now.strftime("%m%d%H%M")  # Month+Day+Hour+Min format
    
    # Get git information
    git_branch = sh("git rev-parse --abbrev-ref HEAD", log: false).strip
    git_commit = sh("git rev-parse --short HEAD", log: false).strip
    
    # Get build number from environment or generate from timestamp
    build_number = ENV["GITHUB_RUN_NUMBER"] || timestamp
    
    # Ensure build number is under Android limit (2.1 billion)
    if build_number.to_i > 2100000000
      # Fallback to a simple incrementing number based on minutes since epoch
      build_number = (Time.now.to_i / 60) % 2100000000
    end
    
    # Generate version name: major.minor.patch-branch-commit
    major_minor_patch = "1.0.0"
    if git_branch == "main" || git_branch == "master"
      version_name = "#{major_minor_patch}-debug-#{git_commit}"
    else
      # Sanitize branch name for version
      clean_branch = git_branch.gsub(/[^a-zA-Z0-9]/, "")
      version_name = "#{major_minor_patch}-#{clean_branch}-#{git_commit}"
    end
    
    puts "🏷️  Generated version: #{version_name} (#{build_number})"
    
    {
      version_name: version_name,
      version_code: build_number.to_i
    }
  end
  
  desc "Create build information file"
  private_lane :create_build_info do |options|
    version_name = options[:version_name]
    version_code = options[:version_code]
    build_type = options[:build_type] || "debug"
    flavor = options[:flavor] || "dev"
    
    build_info = {
      version_name: version_name,
      version_code: version_code,
      build_time: Time.now.utc.iso8601,
      git_branch: sh("git rev-parse --abbrev-ref HEAD", log: false).strip,
      git_commit: sh("git rev-parse HEAD", log: false).strip,
      git_commit_short: sh("git rev-parse --short HEAD", log: false).strip,
      build_type: build_type,
      flavor: flavor
    }
    
    # Write build info to JSON file
    File.write("../build_info.json", JSON.pretty_generate(build_info))
    puts "📄 Build info written to build_info.json"
  end

  desc "Copy artifacts with timestamp-based names"
  private_lane :copy_artifacts_with_timestamp do |options|
    version_name = options[:version_name]
    version_code = options[:version_code]
    build_type = options[:build_type] || "debug"
    flavor = options[:flavor] || "dev"
    
    # Generate timestamp for filenames
    timestamp = Time.now.strftime("%Y%m%d_%H%M%S")
    git_commit = sh("git rev-parse --short HEAD", log: false).strip
    
    # Ensure target directories exist based on build type
    sh("mkdir -p ../build/app/outputs/apk")
    if build_type == "debug"
      sh("mkdir -p ../build/app/outputs/bundle/debug")
    else
      sh("mkdir -p ../build/app/outputs/bundle/release")
    end
    
    # Define original paths based on build type and flavor
    if build_type == "debug"
      case flavor
      when "staging"
        original_apk = "../build/app/outputs/flutter-apk/app-staging-debug.apk"
        original_aab = "../build/app/outputs/bundle/stagingDebug/app-staging-debug.aab"
        alternative_apk = "../build/app/outputs/apk/staging/debug/app-staging-debug.apk"
        alternative_aab = "../build/app/outputs/bundle/debug/app-staging-debug.aab"
      when "production"
        original_apk = "../build/app/outputs/flutter-apk/app-production-debug.apk"
        original_aab = "../build/app/outputs/bundle/productionDebug/app-production-debug.aab"
        alternative_apk = "../build/app/outputs/apk/production/debug/app-production-debug.apk"
        alternative_aab = "../build/app/outputs/bundle/debug/app-production-debug.aab"
      else # dev flavor
        original_apk = "../build/app/outputs/flutter-apk/app-dev-debug.apk"
        original_aab = "../build/app/outputs/bundle/devDebug/app-dev-debug.aab"
        alternative_apk = "../build/app/outputs/apk/dev/debug/app-dev-debug.apk"
        alternative_aab = "../build/app/outputs/bundle/debug/app-dev-debug.aab"
      end
      new_apk = "../build/app/outputs/apk/app-#{flavor}-debug-#{timestamp}-#{git_commit}.apk"
      new_aab = "../build/app/outputs/bundle/debug/app-#{flavor}-debug-#{timestamp}-#{git_commit}.aab"
    else # release builds
      case flavor
      when "staging"
        original_apk = "../build/app/outputs/flutter-apk/app-staging-release.apk"
        original_aab = "../build/app/outputs/bundle/stagingRelease/app-staging-release.aab"
        alternative_apk = "../build/app/outputs/apk/staging/release/app-staging-release.apk"
        alternative_aab = "../build/app/outputs/bundle/release/app-staging-release.aab"
      when "production"
        original_apk = "../build/app/outputs/flutter-apk/app-production-release.apk"
        original_aab = "../build/app/outputs/bundle/productionRelease/app-production-release.aab"
        alternative_apk = "../build/app/outputs/apk/production/release/app-production-release.apk"
        alternative_aab = "../build/app/outputs/bundle/release/app-production-release.aab"
      else # dev flavor
        original_apk = "../build/app/outputs/flutter-apk/app-dev-release.apk"
        original_aab = "../build/app/outputs/bundle/devRelease/app-dev-release.aab"
        alternative_apk = "../build/app/outputs/apk/dev/release/app-dev-release.apk"
        alternative_aab = "../build/app/outputs/bundle/release/app-dev-release.aab"
      end
      new_apk = "../build/app/outputs/apk/app-#{flavor}-release-#{timestamp}-#{git_commit}.apk"
      new_aab = "../build/app/outputs/bundle/release/app-#{flavor}-release-#{timestamp}-#{git_commit}.aab"
    end
    
    # Check if files exist and list them for debugging
    puts "🔍 Checking for #{flavor} #{build_type} build artifacts..."
    puts "Looking for APK: #{File.expand_path(original_apk)}"
    puts "APK exists: #{File.exist?(File.expand_path(original_apk))}"
    
    puts "Looking for AAB: #{File.expand_path(original_aab)}"  
    puts "AAB exists: #{File.exist?(File.expand_path(original_aab))}"
    
    puts "Alternative APK: #{File.expand_path(alternative_apk)}"
    puts "Alternative APK exists: #{File.exist?(File.expand_path(alternative_apk))}"
    
    # List all available files for debugging
    puts "📁 Available APK files:"
    Dir.glob("../build/app/outputs/**/*.apk").each { |file| puts "   #{file}" }
    
    puts "� Available AAB files:"
    Dir.glob("../build/app/outputs/**/*.aab").each { |file| puts "   #{file}" }

    {
      version_name: version_name,
      version_code: version_code,
      apk_path: original_apk,
      aab_path: original_aab,
      original_apk_path: original_apk,
      original_aab_path: original_aab
    }
  end

  # =============================================================================
  # UTILITY LANES
  # =============================================================================
  
  desc "Validate build configuration"
  lane :validate do
    puts "🔍 Validating Android build configuration..."
    
    # Check if key.properties exists
    unless File.exist?("../key.properties")
      UI.error("❌ key.properties file not found!")
      UI.error("Create android/key.properties with your keystore configuration")
      raise "Missing key.properties file"
    end
    
    # Check if keystore file exists
    properties = File.read("../key.properties")
    if properties.include?("storeFile=")
      store_file = properties.match(/storeFile=(.+)/)[1].strip
      
      # Handle both absolute and relative paths
      if store_file.start_with?("/")
        keystore_path = store_file
      else
        keystore_path = File.join("..", store_file)
      end
      
      unless File.exist?(keystore_path)
        UI.error("❌ Keystore file not found: #{keystore_path}")
        raise "Missing keystore file"
      end
    end
    
    puts "✅ Android configuration validation passed"
  end
  
  desc "Clean build artifacts"
  lane :clean do
    puts "🧹 Cleaning Android build artifacts..."
    
    sh("cd .. && flutter clean")
    gradle(task: "clean")
    
    puts "✅ Android clean completed"
  end
  
  # =============================================================================
  # ERROR HANDLING
  # =============================================================================
  
  error do |lane, exception|
    puts "❌ Error in lane #{lane}: #{exception.message}"
    
    # Send notification if configured
    if ENV["SLACK_WEBHOOK_URL"]
      slack(
        message: "❌ Android deployment failed in lane: #{lane}",
        success: false,
        slack_url: ENV["SLACK_WEBHOOK_URL"]
      )
    end
  end
  
end
