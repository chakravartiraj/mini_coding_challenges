# Android Fastfile
# This file contains the fastlane.tools configuration for Android deployments
# Use this file to define all available lanes for Android

require 'fileutils'
require 'json'

default_platform(:android)

platform :android do
  # =============================================================================
  # ANDROID SETUP AND UTILITIES
  # =============================================================================
  
  desc "Setup Android environment and dependencies"
  lane :setup do
    puts "üîß Setting up Android environment..."
    
    # Ensure Flutter dependencies are installed
    sh("cd .. && flutter pub get")
    
    # Clean previous builds
    sh("cd .. && flutter clean")
    
    puts "‚úÖ Android environment setup complete"
  end
  
  desc "Run Android tests"
  lane :test do
    puts "üß™ Running Android tests..."
    
    # Run Flutter tests
    sh("cd .. && flutter test")
    
    # Run Android unit tests
    gradle(task: "test")
    
    puts "‚úÖ Android tests completed"
  end
  
  desc "Build Android APK"
  lane :build_apk do |options|
    environment = options[:environment] || "debug"
    
    puts "üî® Building Android APK for #{environment}..."
    
    setup
    
    if environment == "release"
      sh("cd .. && flutter build apk --release")
    else
      sh("cd .. && flutter build apk --debug")
    end
    
    puts "‚úÖ Android APK build completed"
  end
  
  desc "Build Android App Bundle"
  lane :build_bundle do |options|
    environment = options[:environment] || "debug"
    
    puts "üì¶ Building Android App Bundle for #{environment}..."
    
    setup
    
    if environment == "release"
      sh("cd .. && flutter build appbundle --release")
    else
      sh("cd .. && flutter build appbundle --debug")
    end
    
    puts "‚úÖ Android App Bundle build completed"
  end
  
  # =============================================================================
  # DEPLOYMENT LANES
  # =============================================================================
  
  desc "Deploy to internal testing"
  lane :deploy_internal do |options|
    puts "üöÄ Deploying to Google Play Internal Testing..."
    
    build_bundle(environment: "release")
    
    upload_to_play_store(
      track: 'internal',
      aab: '../build/app/outputs/bundle/release/app-release.aab',
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
    
    puts "‚úÖ Deployed to Google Play Internal Testing"
  end
  
  desc "Deploy to alpha testing"
  lane :deploy_alpha do |options|
    puts "üöÄ Deploying to Google Play Alpha Testing..."
    
    build_bundle(environment: "release")
    
    upload_to_play_store(
      track: 'alpha',
      aab: '../build/app/outputs/bundle/release/app-release.aab',
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
    
    puts "‚úÖ Deployed to Google Play Alpha Testing"
  end
  
  desc "Deploy to beta testing"
  lane :deploy_beta do |options|
    puts "üöÄ Deploying to Google Play Beta Testing..."
    
    build_bundle(environment: "release")
    
    upload_to_play_store(
      track: 'beta',
      aab: '../build/app/outputs/bundle/release/app-release.aab',
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
    
    puts "‚úÖ Deployed to Google Play Beta Testing"
  end
  
  desc "Deploy to production"
  lane :deploy_production do |options|
    puts "üöÄ Deploying to Google Play Store Production..."
    
    build_bundle(environment: "release")
    
    upload_to_play_store(
      track: 'production',
      aab: '../build/app/outputs/bundle/release/app-release.aab',
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
    
    puts "‚úÖ Deployed to Google Play Store Production"
  end
  
  desc "Deploy to Firebase App Distribution"
  lane :deploy_firebase do |options|
    puts "üî• Deploying to Firebase App Distribution..."
    
    build_apk(environment: "release")
    
    firebase_app_distribution(
      app: ENV["FIREBASE_APP_ID_ANDROID"],
      apk_path: "../build/app/outputs/flutter-apk/app-release.apk",
      groups: "testers",
      release_notes: "Latest build from #{git_branch}"
    )
    
    puts "‚úÖ Deployed to Firebase App Distribution"
  end
  
  # =============================================================================
  # DEBUG BUILD WITH DYNAMIC VERSIONING
  # =============================================================================
  
  desc "Build debug artifacts with dynamic versioning"
  lane :build_debug_artifacts do |options|
    puts "üöÄ Building debug artifacts with dynamic versioning..."
    
    # Generate dynamic version
    version_info = generate_dynamic_version
    version_name = version_info[:version_name]
    version_code = version_info[:version_code]
    
    puts "üì¶ Building with version: #{version_name} (#{version_code})"
    
    setup
    
    # Build APK with dynamic version
    sh("cd .. && flutter build apk --debug --build-name=#{version_name} --build-number=#{version_code}")
    
    # Build App Bundle with dynamic version
    sh("cd .. && flutter build appbundle --debug --build-name=#{version_name} --build-number=#{version_code}")
    
    # Copy artifacts with timestamp-based names
    timestamped_artifacts = copy_artifacts_with_timestamp(version_name: version_name, version_code: version_code, build_type: "debug")
    
    # Create build info file
    create_build_info(version_name: version_name, version_code: version_code, build_type: "debug")
    
    puts "‚úÖ Debug artifacts build completed with version #{version_name}"
    puts "üì¶ Artifacts available at:"
    puts "   APK: #{timestamped_artifacts[:apk_path]}"
    puts "   AAB: #{timestamped_artifacts[:aab_path]}"
  end
  
  desc "Build release artifacts with dynamic versioning"
  lane :build_release_artifacts do |options|
    puts "üöÄ Building release artifacts with dynamic versioning..."
    
    # Generate dynamic version
    version_info = generate_dynamic_version
    version_name = version_info[:version_name]
    version_code = version_info[:version_code]
    
    puts "üì¶ Building with version: #{version_name} (#{version_code})"
    
    setup
    
    # Build APK with dynamic version
    sh("cd .. && flutter build apk --release --build-name=#{version_name} --build-number=#{version_code}")
    
    # Build App Bundle with dynamic version
    sh("cd .. && flutter build appbundle --release --build-name=#{version_name} --build-number=#{version_code}")
    
    # Copy artifacts with timestamp-based names
    timestamped_artifacts = copy_artifacts_with_timestamp(version_name: version_name, version_code: version_code, build_type: "release")
    
    # Create build info file
    create_build_info(version_name: version_name, version_code: version_code, build_type: "release")
    
    puts "‚úÖ Release artifacts build completed with version #{version_name}"
    puts "üì¶ Artifacts available at:"
    puts "   APK: #{timestamped_artifacts[:apk_path]}"
    puts "   AAB: #{timestamped_artifacts[:aab_path]}"
  end

  desc "Generate dynamic version based on timestamp and git info"
  private_lane :generate_dynamic_version do
    # Get current timestamp (Android-safe format: MMDDHHMM to stay under 2.1B)
    timestamp = Time.now.strftime("%m%d%H%M")  # Month+Day+Hour+Min format
    
    # Get git information
    git_branch = sh("git rev-parse --abbrev-ref HEAD", log: false).strip
    git_commit = sh("git rev-parse --short HEAD", log: false).strip
    
    # Get build number from environment or generate from timestamp
    build_number = ENV["GITHUB_RUN_NUMBER"] || timestamp
    
    # Ensure build number is under Android limit (2.1 billion)
    if build_number.to_i > 2100000000
      # Fallback to a simple incrementing number based on minutes since epoch
      build_number = (Time.now.to_i / 60) % 2100000000
    end
    
    # Generate version name: major.minor.patch-branch-commit
    major_minor_patch = "1.0.0"
    if git_branch == "main" || git_branch == "master"
      version_name = "#{major_minor_patch}-debug-#{git_commit}"
    else
      # Sanitize branch name for version
      clean_branch = git_branch.gsub(/[^a-zA-Z0-9]/, "")
      version_name = "#{major_minor_patch}-#{clean_branch}-#{git_commit}"
    end
    
    puts "üè∑Ô∏è  Generated version: #{version_name} (#{build_number})"
    
    {
      version_name: version_name,
      version_code: build_number.to_i
    }
  end
  
  desc "Create build information file"
  private_lane :create_build_info do |options|
    version_name = options[:version_name]
    version_code = options[:version_code]
    build_type = options[:build_type] || "debug"
    
    build_info = {
      version_name: version_name,
      version_code: version_code,
      build_time: Time.now.utc.iso8601,
      git_branch: sh("git rev-parse --abbrev-ref HEAD", log: false).strip,
      git_commit: sh("git rev-parse HEAD", log: false).strip,
      git_commit_short: sh("git rev-parse --short HEAD", log: false).strip,
      build_type: build_type
    }
    
    # Write build info to JSON file
    File.write("../build_info.json", JSON.pretty_generate(build_info))
    puts "üìÑ Build info written to build_info.json"
  end

  desc "Copy artifacts with timestamp-based names"
  private_lane :copy_artifacts_with_timestamp do |options|
    version_name = options[:version_name]
    version_code = options[:version_code]
    build_type = options[:build_type] || "debug"
    
    # Generate timestamp for filenames
    timestamp = Time.now.strftime("%Y%m%d_%H%M%S")
    git_commit = sh("git rev-parse --short HEAD", log: false).strip
    
    # Ensure target directories exist based on build type
    sh("mkdir -p ../build/app/outputs/apk")
    if build_type == "debug"
      sh("mkdir -p ../build/app/outputs/bundle/debug")
    else
      sh("mkdir -p ../build/app/outputs/bundle/release")
    end
    
    # Define original and new paths based on build type
    if build_type == "debug"
      original_apk = "../build/app/outputs/flutter-apk/app-debug.apk"
      original_aab = "../build/app/outputs/bundle/debug/app-debug.aab"
      alternative_apk = "../build/app/outputs/apk/debug/app-debug.apk"
      new_apk = "../build/app/outputs/apk/app-debug-#{timestamp}-#{git_commit}.apk"
      new_aab = "../build/app/outputs/bundle/debug/app-debug-#{timestamp}-#{git_commit}.aab"
    else
      original_apk = "../build/app/outputs/flutter-apk/app-release.apk"
      original_aab = "../build/app/outputs/bundle/release/app-release.aab"
      alternative_apk = "../build/app/outputs/apk/release/app-release.apk"
      new_apk = "../build/app/outputs/apk/app-release-#{timestamp}-#{git_commit}.apk"
      new_aab = "../build/app/outputs/bundle/release/app-release-#{timestamp}-#{git_commit}.aab"
    end
    
    # Copy files with new names
    original_apk_full = File.expand_path(original_apk)
    alternative_apk_full = File.expand_path(alternative_apk)
    original_aab_full = File.expand_path(original_aab)
    new_apk_full = File.expand_path(new_apk)
    new_aab_full = File.expand_path(new_aab)
    
    # Copy APK from available location to correct timestamped location
    if File.exist?(original_apk_full)
      FileUtils.cp(original_apk_full, new_apk_full)
      puts "üì¶ APK copied from flutter-apk to: #{new_apk}"
    elsif File.exist?(alternative_apk_full)
      FileUtils.cp(alternative_apk_full, new_apk_full)
      puts "üì¶ APK copied from apk/debug to: #{new_apk}"
    else
      UI.error("‚ùå APK not found in expected locations: #{original_apk_full} or #{alternative_apk_full}")
    end
    
    if File.exist?(original_aab_full)
      FileUtils.cp(original_aab_full, new_aab_full)
      puts "üì¶ AAB copied to: #{new_aab}"
    else
      UI.error("‚ùå Original AAB not found: #{original_aab_full}")
    end
    
    {
      version_name: version_name,
      version_code: version_code,
      apk_path: new_apk,
      aab_path: new_aab,
      original_apk_path: original_apk,
      original_aab_path: original_aab
    }
  end

  # =============================================================================
  # UTILITY LANES
  # =============================================================================
  
  desc "Validate build configuration"
  lane :validate do
    puts "üîç Validating Android build configuration..."
    
    # Check if key.properties exists
    unless File.exist?("../key.properties")
      UI.error("‚ùå key.properties file not found!")
      UI.error("Create android/key.properties with your keystore configuration")
      raise "Missing key.properties file"
    end
    
    # Check if keystore file exists
    properties = File.read("../key.properties")
    if properties.include?("storeFile=")
      store_file = properties.match(/storeFile=(.+)/)[1].strip
      
      # Handle both absolute and relative paths
      if store_file.start_with?("/")
        keystore_path = store_file
      else
        keystore_path = File.join("..", store_file)
      end
      
      unless File.exist?(keystore_path)
        UI.error("‚ùå Keystore file not found: #{keystore_path}")
        raise "Missing keystore file"
      end
    end
    
    puts "‚úÖ Android configuration validation passed"
  end
  
  desc "Clean build artifacts"
  lane :clean do
    puts "üßπ Cleaning Android build artifacts..."
    
    sh("cd .. && flutter clean")
    gradle(task: "clean")
    
    puts "‚úÖ Android clean completed"
  end
  
  # =============================================================================
  # ERROR HANDLING
  # =============================================================================
  
  error do |lane, exception|
    puts "‚ùå Error in lane #{lane}: #{exception.message}"
    
    # Send notification if configured
    if ENV["SLACK_WEBHOOK_URL"]
      slack(
        message: "‚ùå Android deployment failed in lane: #{lane}",
        success: false,
        slack_url: ENV["SLACK_WEBHOOK_URL"]
      )
    end
  end
  
end
